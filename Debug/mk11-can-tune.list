
mk11-can-tune.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bfc  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002d88  08002d88  00003d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dc8  08002dc8  0000402c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002dc8  08002dc8  0000402c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002dc8  08002dc8  0000402c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dc8  08002dc8  00003dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002dcc  08002dcc  00003dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08002dd0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000002c  08002dfc  0000402c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08002dfc  000040d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000402c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f13  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001df3  00000000  00000000  0000bf6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  0000dd68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000060a  00000000  00000000  0000e5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f212  00000000  00000000  0000ebb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000973c  00000000  00000000  0002ddc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bc125  00000000  00000000  00037500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f3625  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f04  00000000  00000000  000f3668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000f556c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000002c 	.word	0x2000002c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002d70 	.word	0x08002d70

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000030 	.word	0x20000030
 80001c8:	08002d70 	.word	0x08002d70

080001cc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80001d0:	4b18      	ldr	r3, [pc, #96]	@ (8000234 <MX_CAN1_Init+0x68>)
 80001d2:	4a19      	ldr	r2, [pc, #100]	@ (8000238 <MX_CAN1_Init+0x6c>)
 80001d4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 80001d6:	4b17      	ldr	r3, [pc, #92]	@ (8000234 <MX_CAN1_Init+0x68>)
 80001d8:	2201      	movs	r2, #1
 80001da:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 80001dc:	4b15      	ldr	r3, [pc, #84]	@ (8000234 <MX_CAN1_Init+0x68>)
 80001de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80001e2:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80001e4:	4b13      	ldr	r3, [pc, #76]	@ (8000234 <MX_CAN1_Init+0x68>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80001ea:	4b12      	ldr	r3, [pc, #72]	@ (8000234 <MX_CAN1_Init+0x68>)
 80001ec:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 80001f0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80001f2:	4b10      	ldr	r3, [pc, #64]	@ (8000234 <MX_CAN1_Init+0x68>)
 80001f4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80001f8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80001fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000234 <MX_CAN1_Init+0x68>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000200:	4b0c      	ldr	r3, [pc, #48]	@ (8000234 <MX_CAN1_Init+0x68>)
 8000202:	2200      	movs	r2, #0
 8000204:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000206:	4b0b      	ldr	r3, [pc, #44]	@ (8000234 <MX_CAN1_Init+0x68>)
 8000208:	2200      	movs	r2, #0
 800020a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800020c:	4b09      	ldr	r3, [pc, #36]	@ (8000234 <MX_CAN1_Init+0x68>)
 800020e:	2200      	movs	r2, #0
 8000210:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000212:	4b08      	ldr	r3, [pc, #32]	@ (8000234 <MX_CAN1_Init+0x68>)
 8000214:	2200      	movs	r2, #0
 8000216:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000218:	4b06      	ldr	r3, [pc, #24]	@ (8000234 <MX_CAN1_Init+0x68>)
 800021a:	2200      	movs	r2, #0
 800021c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800021e:	4805      	ldr	r0, [pc, #20]	@ (8000234 <MX_CAN1_Init+0x68>)
 8000220:	f000 fbd4 	bl	80009cc <HAL_CAN_Init>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800022a:	f000 f933 	bl	8000494 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	20000048 	.word	0x20000048
 8000238:	40006400 	.word	0x40006400

0800023c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b08a      	sub	sp, #40	@ 0x28
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000244:	f107 0314 	add.w	r3, r7, #20
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
 800024c:	605a      	str	r2, [r3, #4]
 800024e:	609a      	str	r2, [r3, #8]
 8000250:	60da      	str	r2, [r3, #12]
 8000252:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a25      	ldr	r2, [pc, #148]	@ (80002f0 <HAL_CAN_MspInit+0xb4>)
 800025a:	4293      	cmp	r3, r2
 800025c:	d143      	bne.n	80002e6 <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800025e:	4b25      	ldr	r3, [pc, #148]	@ (80002f4 <HAL_CAN_MspInit+0xb8>)
 8000260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000262:	4a24      	ldr	r2, [pc, #144]	@ (80002f4 <HAL_CAN_MspInit+0xb8>)
 8000264:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000268:	6593      	str	r3, [r2, #88]	@ 0x58
 800026a:	4b22      	ldr	r3, [pc, #136]	@ (80002f4 <HAL_CAN_MspInit+0xb8>)
 800026c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800026e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000272:	613b      	str	r3, [r7, #16]
 8000274:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000276:	4b1f      	ldr	r3, [pc, #124]	@ (80002f4 <HAL_CAN_MspInit+0xb8>)
 8000278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800027a:	4a1e      	ldr	r2, [pc, #120]	@ (80002f4 <HAL_CAN_MspInit+0xb8>)
 800027c:	f043 0301 	orr.w	r3, r3, #1
 8000280:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000282:	4b1c      	ldr	r3, [pc, #112]	@ (80002f4 <HAL_CAN_MspInit+0xb8>)
 8000284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000286:	f003 0301 	and.w	r3, r3, #1
 800028a:	60fb      	str	r3, [r7, #12]
 800028c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800028e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000294:	2302      	movs	r3, #2
 8000296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000298:	2301      	movs	r3, #1
 800029a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800029c:	2303      	movs	r3, #3
 800029e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80002a0:	2309      	movs	r3, #9
 80002a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002a4:	f107 0314 	add.w	r3, r7, #20
 80002a8:	4619      	mov	r1, r3
 80002aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002ae:	f001 fd65 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80002b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002b8:	2302      	movs	r3, #2
 80002ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002bc:	2300      	movs	r3, #0
 80002be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80002c0:	2303      	movs	r3, #3
 80002c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80002c4:	2309      	movs	r3, #9
 80002c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002c8:	f107 0314 	add.w	r3, r7, #20
 80002cc:	4619      	mov	r1, r3
 80002ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002d2:	f001 fd53 	bl	8001d7c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80002d6:	2200      	movs	r2, #0
 80002d8:	2100      	movs	r1, #0
 80002da:	2014      	movs	r0, #20
 80002dc:	f001 faa1 	bl	8001822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80002e0:	2014      	movs	r0, #20
 80002e2:	f001 faba 	bl	800185a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80002e6:	bf00      	nop
 80002e8:	3728      	adds	r7, #40	@ 0x28
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	40006400 	.word	0x40006400
 80002f4:	40021000 	.word	0x40021000

080002f8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fe:	4b09      	ldr	r3, [pc, #36]	@ (8000324 <MX_GPIO_Init+0x2c>)
 8000300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000302:	4a08      	ldr	r2, [pc, #32]	@ (8000324 <MX_GPIO_Init+0x2c>)
 8000304:	f043 0301 	orr.w	r3, r3, #1
 8000308:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800030a:	4b06      	ldr	r3, [pc, #24]	@ (8000324 <MX_GPIO_Init+0x2c>)
 800030c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800030e:	f003 0301 	and.w	r3, r3, #1
 8000312:	607b      	str	r3, [r7, #4]
 8000314:	687b      	ldr	r3, [r7, #4]

}
 8000316:	bf00      	nop
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	40021000 	.word	0x40021000

08000328 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &(can_context.RxHeader), can_context.RxData) != HAL_OK) {
 8000330:	4b0e      	ldr	r3, [pc, #56]	@ (800036c <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000332:	4a0f      	ldr	r2, [pc, #60]	@ (8000370 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000334:	2100      	movs	r1, #0
 8000336:	6878      	ldr	r0, [r7, #4]
 8000338:	f000 fe21 	bl	8000f7e <HAL_CAN_GetRxMessage>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d10f      	bne.n	8000362 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
		return;
	}

	if (can_context.RxHeader.StdId == PARAMETER_TUNE_ID &&
 8000342:	4b0c      	ldr	r3, [pc, #48]	@ (8000374 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000346:	f240 12cf 	movw	r2, #463	@ 0x1cf
 800034a:	4293      	cmp	r3, r2
 800034c:	d10a      	bne.n	8000364 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
		can_context.RxData[0] == MICROCONTROLLER_ID) {
 800034e:	4b09      	ldr	r3, [pc, #36]	@ (8000374 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000350:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
	if (can_context.RxHeader.StdId == PARAMETER_TUNE_ID &&
 8000354:	2be1      	cmp	r3, #225	@ 0xe1
 8000356:	d105      	bne.n	8000364 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
		parameterTuneRxHandler(&can_context, &params);
 8000358:	4907      	ldr	r1, [pc, #28]	@ (8000378 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 800035a:	4806      	ldr	r0, [pc, #24]	@ (8000374 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800035c:	f000 f9ae 	bl	80006bc <parameterTuneRxHandler>
 8000360:	e000      	b.n	8000364 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
		return;
 8000362:	bf00      	nop
	} else {
		// TODO
	}
}
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	200000b4 	.word	0x200000b4
 8000370:	20000098 	.word	0x20000098
 8000374:	20000070 	.word	0x20000070
 8000378:	200000bc 	.word	0x200000bc

0800037c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b08a      	sub	sp, #40	@ 0x28
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000382:	f000 fa8a 	bl	800089a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000386:	f000 f83f 	bl	8000408 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800038a:	f7ff ffb5 	bl	80002f8 <MX_GPIO_Init>
  MX_CAN1_Init();
 800038e:	f7ff ff1d 	bl	80001cc <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  CAN_FilterTypeDef sFilterConfig;

  sFilterConfig.FilterBank = 0;
 8000392:	2300      	movs	r3, #0
 8000394:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000396:	2300      	movs	r3, #0
 8000398:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800039a:	2301      	movs	r3, #1
 800039c:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 800039e:	2300      	movs	r3, #0
 80003a0:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80003a2:	2300      	movs	r3, #0
 80003a4:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80003a6:	2300      	movs	r3, #0
 80003a8:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80003aa:	2300      	movs	r3, #0
 80003ac:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80003ae:	2300      	movs	r3, #0
 80003b0:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80003b2:	2301      	movs	r3, #1
 80003b4:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80003b6:	230e      	movs	r3, #14
 80003b8:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80003ba:	463b      	mov	r3, r7
 80003bc:	4619      	mov	r1, r3
 80003be:	480d      	ldr	r0, [pc, #52]	@ (80003f4 <main+0x78>)
 80003c0:	f000 fbff 	bl	8000bc2 <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan1);
 80003c4:	480b      	ldr	r0, [pc, #44]	@ (80003f4 <main+0x78>)
 80003c6:	f000 fcc6 	bl	8000d56 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80003ca:	2102      	movs	r1, #2
 80003cc:	4809      	ldr	r0, [pc, #36]	@ (80003f4 <main+0x78>)
 80003ce:	f000 fef8 	bl	80011c2 <HAL_CAN_ActivateNotification>

  sendParameterTune_dummy(&can_context);
 80003d2:	4809      	ldr	r0, [pc, #36]	@ (80003f8 <main+0x7c>)
 80003d4:	f000 f8f6 	bl	80005c4 <sendParameterTune_dummy>

  /* USER CODE END 2 */

  if (parametersTuned == 4) {
 80003d8:	4b08      	ldr	r3, [pc, #32]	@ (80003fc <main+0x80>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2b04      	cmp	r3, #4
 80003de:	d106      	bne.n	80003ee <main+0x72>
	  saveParametersToFlash(&params);
 80003e0:	4807      	ldr	r0, [pc, #28]	@ (8000400 <main+0x84>)
 80003e2:	f000 f9f3 	bl	80007cc <saveParametersToFlash>
	  debug = 1;
 80003e6:	4b07      	ldr	r3, [pc, #28]	@ (8000404 <main+0x88>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	601a      	str	r2, [r3, #0]

//  loadParametersFromFlash(&params);

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003ec:	bf00      	nop
 80003ee:	bf00      	nop
 80003f0:	e7fd      	b.n	80003ee <main+0x72>
 80003f2:	bf00      	nop
 80003f4:	20000048 	.word	0x20000048
 80003f8:	20000070 	.word	0x20000070
 80003fc:	200000d0 	.word	0x200000d0
 8000400:	200000bc 	.word	0x200000bc
 8000404:	200000cc 	.word	0x200000cc

08000408 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b096      	sub	sp, #88	@ 0x58
 800040c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800040e:	f107 0314 	add.w	r3, r7, #20
 8000412:	2244      	movs	r2, #68	@ 0x44
 8000414:	2100      	movs	r1, #0
 8000416:	4618      	mov	r0, r3
 8000418:	f002 fc7e 	bl	8002d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800041c:	463b      	mov	r3, r7
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]
 8000428:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800042a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800042e:	f001 fe1d 	bl	800206c <HAL_PWREx_ControlVoltageScaling>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000438:	f000 f82c 	bl	8000494 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800043c:	2310      	movs	r3, #16
 800043e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000440:	2301      	movs	r3, #1
 8000442:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000444:	2300      	movs	r3, #0
 8000446:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8000448:	2370      	movs	r3, #112	@ 0x70
 800044a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800044c:	2300      	movs	r3, #0
 800044e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000450:	f107 0314 	add.w	r3, r7, #20
 8000454:	4618      	mov	r0, r3
 8000456:	f001 fe5f 	bl	8002118 <HAL_RCC_OscConfig>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000460:	f000 f818 	bl	8000494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000464:	230f      	movs	r3, #15
 8000466:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000468:	2300      	movs	r3, #0
 800046a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800046c:	2300      	movs	r3, #0
 800046e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000470:	2300      	movs	r3, #0
 8000472:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000474:	2300      	movs	r3, #0
 8000476:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000478:	463b      	mov	r3, r7
 800047a:	2100      	movs	r1, #0
 800047c:	4618      	mov	r0, r3
 800047e:	f002 fa5f 	bl	8002940 <HAL_RCC_ClockConfig>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000488:	f000 f804 	bl	8000494 <Error_Handler>
  }
}
 800048c:	bf00      	nop
 800048e:	3758      	adds	r7, #88	@ 0x58
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}

08000494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000498:	b672      	cpsid	i
}
 800049a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800049c:	bf00      	nop
 800049e:	e7fd      	b.n	800049c <Error_Handler+0x8>

080004a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004a6:	4b0f      	ldr	r3, [pc, #60]	@ (80004e4 <HAL_MspInit+0x44>)
 80004a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004aa:	4a0e      	ldr	r2, [pc, #56]	@ (80004e4 <HAL_MspInit+0x44>)
 80004ac:	f043 0301 	orr.w	r3, r3, #1
 80004b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80004b2:	4b0c      	ldr	r3, [pc, #48]	@ (80004e4 <HAL_MspInit+0x44>)
 80004b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004be:	4b09      	ldr	r3, [pc, #36]	@ (80004e4 <HAL_MspInit+0x44>)
 80004c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004c2:	4a08      	ldr	r2, [pc, #32]	@ (80004e4 <HAL_MspInit+0x44>)
 80004c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80004ca:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <HAL_MspInit+0x44>)
 80004cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004d2:	603b      	str	r3, [r7, #0]
 80004d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d6:	bf00      	nop
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	40021000 	.word	0x40021000

080004e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004ec:	bf00      	nop
 80004ee:	e7fd      	b.n	80004ec <NMI_Handler+0x4>

080004f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004f4:	bf00      	nop
 80004f6:	e7fd      	b.n	80004f4 <HardFault_Handler+0x4>

080004f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004fc:	bf00      	nop
 80004fe:	e7fd      	b.n	80004fc <MemManage_Handler+0x4>

08000500 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000504:	bf00      	nop
 8000506:	e7fd      	b.n	8000504 <BusFault_Handler+0x4>

08000508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800050c:	bf00      	nop
 800050e:	e7fd      	b.n	800050c <UsageFault_Handler+0x4>

08000510 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr

0800051e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000522:	bf00      	nop
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr

0800053a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800053e:	f000 fa01 	bl	8000944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
	...

08000548 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800054c:	4802      	ldr	r0, [pc, #8]	@ (8000558 <CAN1_RX0_IRQHandler+0x10>)
 800054e:	f000 fe5e 	bl	800120e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	20000048 	.word	0x20000048

0800055c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000560:	4b06      	ldr	r3, [pc, #24]	@ (800057c <SystemInit+0x20>)
 8000562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000566:	4a05      	ldr	r2, [pc, #20]	@ (800057c <SystemInit+0x20>)
 8000568:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800056c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	e000ed00 	.word	0xe000ed00

08000580 <bytes_to_float>:

#include "tuning.h"
#include "stm32l4xx_hal.h"
#include "string.h"

float bytes_to_float(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3) {
 8000580:	b490      	push	{r4, r7}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	4604      	mov	r4, r0
 8000588:	4608      	mov	r0, r1
 800058a:	4611      	mov	r1, r2
 800058c:	461a      	mov	r2, r3
 800058e:	4623      	mov	r3, r4
 8000590:	71fb      	strb	r3, [r7, #7]
 8000592:	4603      	mov	r3, r0
 8000594:	71bb      	strb	r3, [r7, #6]
 8000596:	460b      	mov	r3, r1
 8000598:	717b      	strb	r3, [r7, #5]
 800059a:	4613      	mov	r3, r2
 800059c:	713b      	strb	r3, [r7, #4]
	float f;
	char b[4] = {b3, b2, b1, b0};
 800059e:	793b      	ldrb	r3, [r7, #4]
 80005a0:	723b      	strb	r3, [r7, #8]
 80005a2:	797b      	ldrb	r3, [r7, #5]
 80005a4:	727b      	strb	r3, [r7, #9]
 80005a6:	79bb      	ldrb	r3, [r7, #6]
 80005a8:	72bb      	strb	r3, [r7, #10]
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	72fb      	strb	r3, [r7, #11]
	memcpy(&f, &b, sizeof(f));
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	60fb      	str	r3, [r7, #12]
	return f;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	ee07 3a90 	vmov	s15, r3
}
 80005b8:	eeb0 0a67 	vmov.f32	s0, s15
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc90      	pop	{r4, r7}
 80005c2:	4770      	bx	lr

080005c4 <sendParameterTune_dummy>:

int parametersTuned = 0;
void sendParameterTune_dummy(CAN_CONTEXT* c) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	  c->TxHeader.IDE = CAN_ID_STD;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2200      	movs	r2, #0
 80005d0:	611a      	str	r2, [r3, #16]
	  c->TxHeader.StdId = PARAMETER_TUNE_ID;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	f240 12cf 	movw	r2, #463	@ 0x1cf
 80005d8:	609a      	str	r2, [r3, #8]
	  c->TxHeader.RTR = CAN_RTR_DATA;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2200      	movs	r2, #0
 80005de:	615a      	str	r2, [r3, #20]
	  c->TxHeader.DLC = 7;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2207      	movs	r2, #7
 80005e4:	619a      	str	r2, [r3, #24]

	  c->TxData[0] = MICROCONTROLLER_ID;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	22e1      	movs	r2, #225	@ 0xe1
 80005ea:	f883 2020 	strb.w	r2, [r3, #32]
	  c->TxData[1] = PARAMETER_TUNE_DATA;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2204      	movs	r2, #4
 80005f2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	  // Some Random Values
	  c->TxData[3] = 0x42;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2242      	movs	r2, #66	@ 0x42
 80005fa:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	  c->TxData[4] = 0x87;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2287      	movs	r2, #135	@ 0x87
 8000602:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	  c->TxData[5] = 0xCC;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	22cc      	movs	r2, #204	@ 0xcc
 800060a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	  c->TxData[6] = 0xCD;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	22cd      	movs	r2, #205	@ 0xcd
 8000612:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

	  c->TxData[2] = MIN_TORQUE_ID;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2201      	movs	r2, #1
 800061a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	  HAL_CAN_AddTxMessage(&hcan1, &(c->TxHeader), c->TxData, &(c->TxMailbox));
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	f103 0108 	add.w	r1, r3, #8
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f103 0220 	add.w	r2, r3, #32
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	3304      	adds	r3, #4
 800062e:	4822      	ldr	r0, [pc, #136]	@ (80006b8 <sendParameterTune_dummy+0xf4>)
 8000630:	f000 fbd5 	bl	8000dde <HAL_CAN_AddTxMessage>
	  HAL_Delay(1000);
 8000634:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000638:	f000 f9a4 	bl	8000984 <HAL_Delay>

	  c->TxData[2] = MAX_TORQUE_ID;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2202      	movs	r2, #2
 8000640:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	  HAL_CAN_AddTxMessage(&hcan1, &(c->TxHeader), c->TxData, &(c->TxMailbox));
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f103 0108 	add.w	r1, r3, #8
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	f103 0220 	add.w	r2, r3, #32
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	3304      	adds	r3, #4
 8000654:	4818      	ldr	r0, [pc, #96]	@ (80006b8 <sendParameterTune_dummy+0xf4>)
 8000656:	f000 fbc2 	bl	8000dde <HAL_CAN_AddTxMessage>
	  HAL_Delay(1000);
 800065a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800065e:	f000 f991 	bl	8000984 <HAL_Delay>

	  c->TxData[2] = REGEN_BASELINE_TORQUE_ID;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2203      	movs	r2, #3
 8000666:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	  HAL_CAN_AddTxMessage(&hcan1, &(c->TxHeader), c->TxData, &(c->TxMailbox));
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f103 0108 	add.w	r1, r3, #8
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f103 0220 	add.w	r2, r3, #32
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	3304      	adds	r3, #4
 800067a:	480f      	ldr	r0, [pc, #60]	@ (80006b8 <sendParameterTune_dummy+0xf4>)
 800067c:	f000 fbaf 	bl	8000dde <HAL_CAN_AddTxMessage>
	  HAL_Delay(1000);
 8000680:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000684:	f000 f97e 	bl	8000984 <HAL_Delay>

	  c->TxData[2] = REGEN_MAX_TORQUE_ID;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2204      	movs	r2, #4
 800068c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	  HAL_CAN_AddTxMessage(&hcan1, &(c->TxHeader), c->TxData, &(c->TxMailbox));
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f103 0108 	add.w	r1, r3, #8
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	f103 0220 	add.w	r2, r3, #32
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	3304      	adds	r3, #4
 80006a0:	4805      	ldr	r0, [pc, #20]	@ (80006b8 <sendParameterTune_dummy+0xf4>)
 80006a2:	f000 fb9c 	bl	8000dde <HAL_CAN_AddTxMessage>
	  HAL_Delay(1000);
 80006a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006aa:	f000 f96b 	bl	8000984 <HAL_Delay>
}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000048 	.word	0x20000048

080006bc <parameterTuneRxHandler>:

void parameterTuneRxHandler(CAN_CONTEXT* c, TUNABLE_PARAMETERS* params) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	6039      	str	r1, [r7, #0]
	// TODO
	switch (c->RxData[1]) {
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d00c      	beq.n	80006ea <parameterTuneRxHandler+0x2e>
 80006d0:	2b04      	cmp	r3, #4
 80006d2:	d000      	beq.n	80006d6 <parameterTuneRxHandler+0x1a>
	case PARAMETER_TUNE_DATA:
		parameterSetData(c, params);
		parametersTuned++;
		break;
	}
}
 80006d4:	e00a      	b.n	80006ec <parameterTuneRxHandler+0x30>
		parameterSetData(c, params);
 80006d6:	6839      	ldr	r1, [r7, #0]
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f000 f80d 	bl	80006f8 <parameterSetData>
		parametersTuned++;
 80006de:	4b05      	ldr	r3, [pc, #20]	@ (80006f4 <parameterTuneRxHandler+0x38>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	3301      	adds	r3, #1
 80006e4:	4a03      	ldr	r2, [pc, #12]	@ (80006f4 <parameterTuneRxHandler+0x38>)
 80006e6:	6013      	str	r3, [r2, #0]
		break;
 80006e8:	e000      	b.n	80006ec <parameterTuneRxHandler+0x30>
		break;
 80006ea:	bf00      	nop
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	200000d0 	.word	0x200000d0

080006f8 <parameterSetData>:

void parameterSetData(CAN_CONTEXT* c, TUNABLE_PARAMETERS* params) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	6039      	str	r1, [r7, #0]
	// TODO: Abstract this slightly so the code isn't so repetitive
	switch (c->RxData[2]) {
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8000708:	3b01      	subs	r3, #1
 800070a:	2b03      	cmp	r3, #3
 800070c:	d85a      	bhi.n	80007c4 <parameterSetData+0xcc>
 800070e:	a201      	add	r2, pc, #4	@ (adr r2, 8000714 <parameterSetData+0x1c>)
 8000710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000714:	08000725 	.word	0x08000725
 8000718:	0800074d 	.word	0x0800074d
 800071c:	08000775 	.word	0x08000775
 8000720:	0800079d 	.word	0x0800079d
	case MIN_TORQUE_ID:
		params->MIN_TORQUE = bytes_to_float(c->RxData[3], c->RxData[4], c->RxData[5], c->RxData[6]);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f893 0047 	ldrb.w	r0, [r3, #71]	@ 0x47
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	f893 1048 	ldrb.w	r1, [r3, #72]	@ 0x48
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f893 2049 	ldrb.w	r2, [r3, #73]	@ 0x49
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800073c:	f7ff ff20 	bl	8000580 <bytes_to_float>
 8000740:	eef0 7a40 	vmov.f32	s15, s0
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	edc3 7a00 	vstr	s15, [r3]
		break;
 800074a:	e03b      	b.n	80007c4 <parameterSetData+0xcc>
	case MAX_TORQUE_ID:
		params->MAX_TORQUE = bytes_to_float(c->RxData[3], c->RxData[4], c->RxData[5], c->RxData[6]);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	f893 0047 	ldrb.w	r0, [r3, #71]	@ 0x47
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	f893 1048 	ldrb.w	r1, [r3, #72]	@ 0x48
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f893 2049 	ldrb.w	r2, [r3, #73]	@ 0x49
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8000764:	f7ff ff0c 	bl	8000580 <bytes_to_float>
 8000768:	eef0 7a40 	vmov.f32	s15, s0
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 8000772:	e027      	b.n	80007c4 <parameterSetData+0xcc>
	case REGEN_BASELINE_TORQUE_ID:
		params->REGEN_BASELINE_TORQUE = bytes_to_float(c->RxData[3], c->RxData[4], c->RxData[5], c->RxData[6]);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f893 0047 	ldrb.w	r0, [r3, #71]	@ 0x47
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	f893 1048 	ldrb.w	r1, [r3, #72]	@ 0x48
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f893 2049 	ldrb.w	r2, [r3, #73]	@ 0x49
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800078c:	f7ff fef8 	bl	8000580 <bytes_to_float>
 8000790:	eef0 7a40 	vmov.f32	s15, s0
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	edc3 7a02 	vstr	s15, [r3, #8]
		break;
 800079a:	e013      	b.n	80007c4 <parameterSetData+0xcc>
	case REGEN_MAX_TORQUE_ID:
		params->REGEN_MAX_TORQUE = bytes_to_float(c->RxData[3], c->RxData[4], c->RxData[5], c->RxData[6]);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	f893 0047 	ldrb.w	r0, [r3, #71]	@ 0x47
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f893 1048 	ldrb.w	r1, [r3, #72]	@ 0x48
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f893 2049 	ldrb.w	r2, [r3, #73]	@ 0x49
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80007b4:	f7ff fee4 	bl	8000580 <bytes_to_float>
 80007b8:	eef0 7a40 	vmov.f32	s15, s0
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	edc3 7a03 	vstr	s15, [r3, #12]
		break;
 80007c2:	bf00      	nop
	}
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <saveParametersToFlash>:

void saveParametersToFlash(TUNABLE_PARAMETERS* data) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	@ 0x28
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 80007d4:	f001 f8c8 	bl	8001968 <HAL_FLASH_Unlock>

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR |
 80007d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000844 <saveParametersToFlash+0x78>)
 80007da:	229b      	movs	r2, #155	@ 0x9b
 80007dc:	611a      	str	r2, [r3, #16]
								FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR |
								FLASH_FLAG_PROGERR);

	FLASH_EraseInitTypeDef eraseConfig = {
 80007de:	f107 0310 	add.w	r3, r7, #16
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	237f      	movs	r3, #127	@ 0x7f
 80007ee:	61bb      	str	r3, [r7, #24]
 80007f0:	2301      	movs	r3, #1
 80007f2:	61fb      	str	r3, [r7, #28]
			.TypeErase = FLASH_TYPEERASE_PAGES,
			.Page = FLASH_PARAMETER_PAGE,
			.NbPages = 1
	};
	uint32_t PageError;
	HAL_FLASHEx_Erase(&eraseConfig, &PageError);
 80007f4:	f107 020c 	add.w	r2, r7, #12
 80007f8:	f107 0310 	add.w	r3, r7, #16
 80007fc:	4611      	mov	r1, r2
 80007fe:	4618      	mov	r0, r3
 8000800:	f001 f996 	bl	8001b30 <HAL_FLASHEx_Erase>

	uint64_t* src = (uint64_t*)data;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	623b      	str	r3, [r7, #32]
	for (uint32_t i = 0; i < sizeof(TUNABLE_PARAMETERS) / 8; i++) {
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	@ 0x24
 800080c:	e011      	b.n	8000832 <saveParametersToFlash+0x66>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FLASH_PARAMETER_ADDR + i * 8, src[i]);
 800080e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000810:	f103 7380 	add.w	r3, r3, #16777216	@ 0x1000000
 8000814:	f503 43fe 	add.w	r3, r3, #32512	@ 0x7f00
 8000818:	00d9      	lsls	r1, r3, #3
 800081a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	6a3a      	ldr	r2, [r7, #32]
 8000820:	4413      	add	r3, r2
 8000822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000826:	2000      	movs	r0, #0
 8000828:	f001 f832 	bl	8001890 <HAL_FLASH_Program>
	for (uint32_t i = 0; i < sizeof(TUNABLE_PARAMETERS) / 8; i++) {
 800082c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800082e:	3301      	adds	r3, #1
 8000830:	627b      	str	r3, [r7, #36]	@ 0x24
 8000832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000834:	2b01      	cmp	r3, #1
 8000836:	d9ea      	bls.n	800080e <saveParametersToFlash+0x42>
	}

	HAL_FLASH_Lock();
 8000838:	f001 f8b8 	bl	80019ac <HAL_FLASH_Lock>
}
 800083c:	bf00      	nop
 800083e:	3728      	adds	r7, #40	@ 0x28
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40022000 	.word	0x40022000

08000848 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000848:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000880 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800084c:	f7ff fe86 	bl	800055c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000850:	480c      	ldr	r0, [pc, #48]	@ (8000884 <LoopForever+0x6>)
  ldr r1, =_edata
 8000852:	490d      	ldr	r1, [pc, #52]	@ (8000888 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000854:	4a0d      	ldr	r2, [pc, #52]	@ (800088c <LoopForever+0xe>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000858:	e002      	b.n	8000860 <LoopCopyDataInit>

0800085a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800085c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085e:	3304      	adds	r3, #4

08000860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000864:	d3f9      	bcc.n	800085a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000866:	4a0a      	ldr	r2, [pc, #40]	@ (8000890 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000868:	4c0a      	ldr	r4, [pc, #40]	@ (8000894 <LoopForever+0x16>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800086c:	e001      	b.n	8000872 <LoopFillZerobss>

0800086e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000870:	3204      	adds	r2, #4

08000872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000874:	d3fb      	bcc.n	800086e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000876:	f002 fa57 	bl	8002d28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800087a:	f7ff fd7f 	bl	800037c <main>

0800087e <LoopForever>:

LoopForever:
    b LoopForever
 800087e:	e7fe      	b.n	800087e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000880:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000888:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 800088c:	08002dd0 	.word	0x08002dd0
  ldr r2, =_sbss
 8000890:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000894:	200000d8 	.word	0x200000d8

08000898 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000898:	e7fe      	b.n	8000898 <ADC1_IRQHandler>

0800089a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008a0:	2300      	movs	r3, #0
 80008a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a4:	2003      	movs	r0, #3
 80008a6:	f000 ffb1 	bl	800180c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008aa:	200f      	movs	r0, #15
 80008ac:	f000 f80e 	bl	80008cc <HAL_InitTick>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d002      	beq.n	80008bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
 80008b8:	71fb      	strb	r3, [r7, #7]
 80008ba:	e001      	b.n	80008c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008bc:	f7ff fdf0 	bl	80004a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008c0:	79fb      	ldrb	r3, [r7, #7]
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008d4:	2300      	movs	r3, #0
 80008d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008d8:	4b17      	ldr	r3, [pc, #92]	@ (8000938 <HAL_InitTick+0x6c>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d023      	beq.n	8000928 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008e0:	4b16      	ldr	r3, [pc, #88]	@ (800093c <HAL_InitTick+0x70>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4b14      	ldr	r3, [pc, #80]	@ (8000938 <HAL_InitTick+0x6c>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	4619      	mov	r1, r3
 80008ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80008f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 ffbd 	bl	8001876 <HAL_SYSTICK_Config>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d10f      	bne.n	8000922 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b0f      	cmp	r3, #15
 8000906:	d809      	bhi.n	800091c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000908:	2200      	movs	r2, #0
 800090a:	6879      	ldr	r1, [r7, #4]
 800090c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000910:	f000 ff87 	bl	8001822 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000914:	4a0a      	ldr	r2, [pc, #40]	@ (8000940 <HAL_InitTick+0x74>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6013      	str	r3, [r2, #0]
 800091a:	e007      	b.n	800092c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800091c:	2301      	movs	r3, #1
 800091e:	73fb      	strb	r3, [r7, #15]
 8000920:	e004      	b.n	800092c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	73fb      	strb	r3, [r7, #15]
 8000926:	e001      	b.n	800092c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000928:	2301      	movs	r3, #1
 800092a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800092c:	7bfb      	ldrb	r3, [r7, #15]
}
 800092e:	4618      	mov	r0, r3
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000008 	.word	0x20000008
 800093c:	20000000 	.word	0x20000000
 8000940:	20000004 	.word	0x20000004

08000944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000948:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <HAL_IncTick+0x20>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	461a      	mov	r2, r3
 800094e:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <HAL_IncTick+0x24>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4413      	add	r3, r2
 8000954:	4a04      	ldr	r2, [pc, #16]	@ (8000968 <HAL_IncTick+0x24>)
 8000956:	6013      	str	r3, [r2, #0]
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	20000008 	.word	0x20000008
 8000968:	200000d4 	.word	0x200000d4

0800096c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  return uwTick;
 8000970:	4b03      	ldr	r3, [pc, #12]	@ (8000980 <HAL_GetTick+0x14>)
 8000972:	681b      	ldr	r3, [r3, #0]
}
 8000974:	4618      	mov	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	200000d4 	.word	0x200000d4

08000984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800098c:	f7ff ffee 	bl	800096c <HAL_GetTick>
 8000990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800099c:	d005      	beq.n	80009aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800099e:	4b0a      	ldr	r3, [pc, #40]	@ (80009c8 <HAL_Delay+0x44>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	461a      	mov	r2, r3
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	4413      	add	r3, r2
 80009a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009aa:	bf00      	nop
 80009ac:	f7ff ffde 	bl	800096c <HAL_GetTick>
 80009b0:	4602      	mov	r2, r0
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	68fa      	ldr	r2, [r7, #12]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d8f7      	bhi.n	80009ac <HAL_Delay+0x28>
  {
  }
}
 80009bc:	bf00      	nop
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000008 	.word	0x20000008

080009cc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d101      	bne.n	80009de <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	e0ed      	b.n	8000bba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d102      	bne.n	80009f0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f7ff fc26 	bl	800023c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f042 0201 	orr.w	r2, r2, #1
 80009fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a00:	f7ff ffb4 	bl	800096c <HAL_GetTick>
 8000a04:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a06:	e012      	b.n	8000a2e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a08:	f7ff ffb0 	bl	800096c <HAL_GetTick>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	2b0a      	cmp	r3, #10
 8000a14:	d90b      	bls.n	8000a2e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a1a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2205      	movs	r2, #5
 8000a26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e0c5      	b.n	8000bba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f003 0301 	and.w	r3, r3, #1
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d0e5      	beq.n	8000a08 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f022 0202 	bic.w	r2, r2, #2
 8000a4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a4c:	f7ff ff8e 	bl	800096c <HAL_GetTick>
 8000a50:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a52:	e012      	b.n	8000a7a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a54:	f7ff ff8a 	bl	800096c <HAL_GetTick>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	2b0a      	cmp	r3, #10
 8000a60:	d90b      	bls.n	8000a7a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a66:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2205      	movs	r2, #5
 8000a72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	e09f      	b.n	8000bba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f003 0302 	and.w	r3, r3, #2
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d1e5      	bne.n	8000a54 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	7e1b      	ldrb	r3, [r3, #24]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d108      	bne.n	8000aa2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	e007      	b.n	8000ab2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000ab0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	7e5b      	ldrb	r3, [r3, #25]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d108      	bne.n	8000acc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	e007      	b.n	8000adc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000ada:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	7e9b      	ldrb	r3, [r3, #26]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d108      	bne.n	8000af6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f042 0220 	orr.w	r2, r2, #32
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	e007      	b.n	8000b06 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f022 0220 	bic.w	r2, r2, #32
 8000b04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	7edb      	ldrb	r3, [r3, #27]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d108      	bne.n	8000b20 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f022 0210 	bic.w	r2, r2, #16
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	e007      	b.n	8000b30 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f042 0210 	orr.w	r2, r2, #16
 8000b2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	7f1b      	ldrb	r3, [r3, #28]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d108      	bne.n	8000b4a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f042 0208 	orr.w	r2, r2, #8
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	e007      	b.n	8000b5a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f022 0208 	bic.w	r2, r2, #8
 8000b58:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	7f5b      	ldrb	r3, [r3, #29]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d108      	bne.n	8000b74 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f042 0204 	orr.w	r2, r2, #4
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	e007      	b.n	8000b84 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f022 0204 	bic.w	r2, r2, #4
 8000b82:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	689a      	ldr	r2, [r3, #8]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	431a      	orrs	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	691b      	ldr	r3, [r3, #16]
 8000b92:	431a      	orrs	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	695b      	ldr	r3, [r3, #20]
 8000b98:	ea42 0103 	orr.w	r1, r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	1e5a      	subs	r2, r3, #1
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2200      	movs	r2, #0
 8000bae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b087      	sub	sp, #28
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
 8000bca:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bd8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000bda:	7cfb      	ldrb	r3, [r7, #19]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d003      	beq.n	8000be8 <HAL_CAN_ConfigFilter+0x26>
 8000be0:	7cfb      	ldrb	r3, [r7, #19]
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	f040 80aa 	bne.w	8000d3c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000bee:	f043 0201 	orr.w	r2, r3, #1
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	695b      	ldr	r3, [r3, #20]
 8000bfc:	f003 031f 	and.w	r3, r3, #31
 8000c00:	2201      	movs	r2, #1
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	43db      	mvns	r3, r3
 8000c12:	401a      	ands	r2, r3
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	69db      	ldr	r3, [r3, #28]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d123      	bne.n	8000c6a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	401a      	ands	r2, r3
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c40:	683a      	ldr	r2, [r7, #0]
 8000c42:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c44:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	3248      	adds	r2, #72	@ 0x48
 8000c4a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c5e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c60:	6979      	ldr	r1, [r7, #20]
 8000c62:	3348      	adds	r3, #72	@ 0x48
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	440b      	add	r3, r1
 8000c68:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d122      	bne.n	8000cb8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c8e:	683a      	ldr	r2, [r7, #0]
 8000c90:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c92:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	3248      	adds	r2, #72	@ 0x48
 8000c98:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cae:	6979      	ldr	r1, [r7, #20]
 8000cb0:	3348      	adds	r3, #72	@ 0x48
 8000cb2:	00db      	lsls	r3, r3, #3
 8000cb4:	440b      	add	r3, r1
 8000cb6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d109      	bne.n	8000cd4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	401a      	ands	r2, r3
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000cd2:	e007      	b.n	8000ce4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	431a      	orrs	r2, r3
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	691b      	ldr	r3, [r3, #16]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d109      	bne.n	8000d00 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	401a      	ands	r2, r3
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000cfe:	e007      	b.n	8000d10 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	431a      	orrs	r2, r3
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	6a1b      	ldr	r3, [r3, #32]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d107      	bne.n	8000d28 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	431a      	orrs	r2, r3
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000d2e:	f023 0201 	bic.w	r2, r3, #1
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	e006      	b.n	8000d4a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d40:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
  }
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	371c      	adds	r7, #28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b084      	sub	sp, #16
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d12e      	bne.n	8000dc8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2202      	movs	r2, #2
 8000d6e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f022 0201 	bic.w	r2, r2, #1
 8000d80:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000d82:	f7ff fdf3 	bl	800096c <HAL_GetTick>
 8000d86:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d88:	e012      	b.n	8000db0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d8a:	f7ff fdef 	bl	800096c <HAL_GetTick>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	2b0a      	cmp	r3, #10
 8000d96:	d90b      	bls.n	8000db0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d9c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2205      	movs	r2, #5
 8000da8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	e012      	b.n	8000dd6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1e5      	bne.n	8000d8a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	e006      	b.n	8000dd6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dcc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
  }
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b089      	sub	sp, #36	@ 0x24
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	60f8      	str	r0, [r7, #12]
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
 8000dea:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000df2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000dfc:	7ffb      	ldrb	r3, [r7, #31]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d003      	beq.n	8000e0a <HAL_CAN_AddTxMessage+0x2c>
 8000e02:	7ffb      	ldrb	r3, [r7, #31]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	f040 80ad 	bne.w	8000f64 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d10a      	bne.n	8000e2a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d105      	bne.n	8000e2a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	f000 8095 	beq.w	8000f54 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	0e1b      	lsrs	r3, r3, #24
 8000e2e:	f003 0303 	and.w	r3, r3, #3
 8000e32:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000e34:	2201      	movs	r2, #1
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	409a      	lsls	r2, r3
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d10d      	bne.n	8000e62 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e50:	68f9      	ldr	r1, [r7, #12]
 8000e52:	6809      	ldr	r1, [r1, #0]
 8000e54:	431a      	orrs	r2, r3
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	3318      	adds	r3, #24
 8000e5a:	011b      	lsls	r3, r3, #4
 8000e5c:	440b      	add	r3, r1
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	e00f      	b.n	8000e82 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e6c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e72:	68f9      	ldr	r1, [r7, #12]
 8000e74:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000e76:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	3318      	adds	r3, #24
 8000e7c:	011b      	lsls	r3, r3, #4
 8000e7e:	440b      	add	r3, r1
 8000e80:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	6819      	ldr	r1, [r3, #0]
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	691a      	ldr	r2, [r3, #16]
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	3318      	adds	r3, #24
 8000e8e:	011b      	lsls	r3, r3, #4
 8000e90:	440b      	add	r3, r1
 8000e92:	3304      	adds	r3, #4
 8000e94:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	7d1b      	ldrb	r3, [r3, #20]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d111      	bne.n	8000ec2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	3318      	adds	r3, #24
 8000ea6:	011b      	lsls	r3, r3, #4
 8000ea8:	4413      	add	r3, r2
 8000eaa:	3304      	adds	r3, #4
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	6811      	ldr	r1, [r2, #0]
 8000eb2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	3318      	adds	r3, #24
 8000eba:	011b      	lsls	r3, r3, #4
 8000ebc:	440b      	add	r3, r1
 8000ebe:	3304      	adds	r3, #4
 8000ec0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3307      	adds	r3, #7
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	061a      	lsls	r2, r3, #24
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3306      	adds	r3, #6
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	041b      	lsls	r3, r3, #16
 8000ed2:	431a      	orrs	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3305      	adds	r3, #5
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	021b      	lsls	r3, r3, #8
 8000edc:	4313      	orrs	r3, r2
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	3204      	adds	r2, #4
 8000ee2:	7812      	ldrb	r2, [r2, #0]
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	6811      	ldr	r1, [r2, #0]
 8000eea:	ea43 0200 	orr.w	r2, r3, r0
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	011b      	lsls	r3, r3, #4
 8000ef2:	440b      	add	r3, r1
 8000ef4:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000ef8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	3303      	adds	r3, #3
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	061a      	lsls	r2, r3, #24
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	3302      	adds	r3, #2
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	041b      	lsls	r3, r3, #16
 8000f0a:	431a      	orrs	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	021b      	lsls	r3, r3, #8
 8000f14:	4313      	orrs	r3, r2
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	7812      	ldrb	r2, [r2, #0]
 8000f1a:	4610      	mov	r0, r2
 8000f1c:	68fa      	ldr	r2, [r7, #12]
 8000f1e:	6811      	ldr	r1, [r2, #0]
 8000f20:	ea43 0200 	orr.w	r2, r3, r0
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	440b      	add	r3, r1
 8000f2a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000f2e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	3318      	adds	r3, #24
 8000f38:	011b      	lsls	r3, r3, #4
 8000f3a:	4413      	add	r3, r2
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	6811      	ldr	r1, [r2, #0]
 8000f42:	f043 0201 	orr.w	r2, r3, #1
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	3318      	adds	r3, #24
 8000f4a:	011b      	lsls	r3, r3, #4
 8000f4c:	440b      	add	r3, r1
 8000f4e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000f50:	2300      	movs	r3, #0
 8000f52:	e00e      	b.n	8000f72 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f58:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e006      	b.n	8000f72 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f68:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
  }
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3724      	adds	r7, #36	@ 0x24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b087      	sub	sp, #28
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	60f8      	str	r0, [r7, #12]
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
 8000f8a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f92:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f94:	7dfb      	ldrb	r3, [r7, #23]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d003      	beq.n	8000fa2 <HAL_CAN_GetRxMessage+0x24>
 8000f9a:	7dfb      	ldrb	r3, [r7, #23]
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	f040 8103 	bne.w	80011a8 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d10e      	bne.n	8000fc6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	f003 0303 	and.w	r3, r3, #3
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d116      	bne.n	8000fe4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e0f7      	b.n	80011b6 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	691b      	ldr	r3, [r3, #16]
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d107      	bne.n	8000fe4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fd8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e0e8      	b.n	80011b6 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	331b      	adds	r3, #27
 8000fec:	011b      	lsls	r3, r3, #4
 8000fee:	4413      	add	r3, r2
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0204 	and.w	r2, r3, #4
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d10c      	bne.n	800101c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	331b      	adds	r3, #27
 800100a:	011b      	lsls	r3, r3, #4
 800100c:	4413      	add	r3, r2
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	0d5b      	lsrs	r3, r3, #21
 8001012:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	e00b      	b.n	8001034 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	331b      	adds	r3, #27
 8001024:	011b      	lsls	r3, r3, #4
 8001026:	4413      	add	r3, r2
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	08db      	lsrs	r3, r3, #3
 800102c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	331b      	adds	r3, #27
 800103c:	011b      	lsls	r3, r3, #4
 800103e:	4413      	add	r3, r2
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0202 	and.w	r2, r3, #2
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	331b      	adds	r3, #27
 8001052:	011b      	lsls	r3, r3, #4
 8001054:	4413      	add	r3, r2
 8001056:	3304      	adds	r3, #4
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0308 	and.w	r3, r3, #8
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2208      	movs	r2, #8
 8001066:	611a      	str	r2, [r3, #16]
 8001068:	e00b      	b.n	8001082 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	331b      	adds	r3, #27
 8001072:	011b      	lsls	r3, r3, #4
 8001074:	4413      	add	r3, r2
 8001076:	3304      	adds	r3, #4
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 020f 	and.w	r2, r3, #15
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	331b      	adds	r3, #27
 800108a:	011b      	lsls	r3, r3, #4
 800108c:	4413      	add	r3, r2
 800108e:	3304      	adds	r3, #4
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	0a1b      	lsrs	r3, r3, #8
 8001094:	b2da      	uxtb	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	331b      	adds	r3, #27
 80010a2:	011b      	lsls	r3, r3, #4
 80010a4:	4413      	add	r3, r2
 80010a6:	3304      	adds	r3, #4
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	0c1b      	lsrs	r3, r3, #16
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	011b      	lsls	r3, r3, #4
 80010ba:	4413      	add	r3, r2
 80010bc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	011b      	lsls	r3, r3, #4
 80010d0:	4413      	add	r3, r2
 80010d2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	0a1a      	lsrs	r2, r3, #8
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	3301      	adds	r3, #1
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	011b      	lsls	r3, r3, #4
 80010ea:	4413      	add	r3, r2
 80010ec:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	0c1a      	lsrs	r2, r3, #16
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	3302      	adds	r3, #2
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	011b      	lsls	r3, r3, #4
 8001104:	4413      	add	r3, r2
 8001106:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	0e1a      	lsrs	r2, r3, #24
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	3303      	adds	r3, #3
 8001112:	b2d2      	uxtb	r2, r2
 8001114:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	011b      	lsls	r3, r3, #4
 800111e:	4413      	add	r3, r2
 8001120:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	3304      	adds	r3, #4
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	011b      	lsls	r3, r3, #4
 8001136:	4413      	add	r3, r2
 8001138:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	0a1a      	lsrs	r2, r3, #8
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	3305      	adds	r3, #5
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	011b      	lsls	r3, r3, #4
 8001150:	4413      	add	r3, r2
 8001152:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	0c1a      	lsrs	r2, r3, #16
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	3306      	adds	r3, #6
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	011b      	lsls	r3, r3, #4
 800116a:	4413      	add	r3, r2
 800116c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	0e1a      	lsrs	r2, r3, #24
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	3307      	adds	r3, #7
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d108      	bne.n	8001194 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68da      	ldr	r2, [r3, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f042 0220 	orr.w	r2, r2, #32
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	e007      	b.n	80011a4 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	691a      	ldr	r2, [r3, #16]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f042 0220 	orr.w	r2, r2, #32
 80011a2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80011a4:	2300      	movs	r3, #0
 80011a6:	e006      	b.n	80011b6 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ac:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
  }
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	371c      	adds	r7, #28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b085      	sub	sp, #20
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
 80011ca:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011d2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d002      	beq.n	80011e0 <HAL_CAN_ActivateNotification+0x1e>
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d109      	bne.n	80011f4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6959      	ldr	r1, [r3, #20]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	683a      	ldr	r2, [r7, #0]
 80011ec:	430a      	orrs	r2, r1
 80011ee:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80011f0:	2300      	movs	r3, #0
 80011f2:	e006      	b.n	8001202 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011f8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
  }
}
 8001202:	4618      	mov	r0, r3
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b08a      	sub	sp, #40	@ 0x28
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001216:	2300      	movs	r3, #0
 8001218:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800124a:	6a3b      	ldr	r3, [r7, #32]
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	2b00      	cmp	r3, #0
 8001252:	d07c      	beq.n	800134e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	2b00      	cmp	r3, #0
 800125c:	d023      	beq.n	80012a6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2201      	movs	r2, #1
 8001264:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 f983 	bl	800157c <HAL_CAN_TxMailbox0CompleteCallback>
 8001276:	e016      	b.n	80012a6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	2b00      	cmp	r3, #0
 8001280:	d004      	beq.n	800128c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001284:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001288:	627b      	str	r3, [r7, #36]	@ 0x24
 800128a:	e00c      	b.n	80012a6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	f003 0308 	and.w	r3, r3, #8
 8001292:	2b00      	cmp	r3, #0
 8001294:	d004      	beq.n	80012a0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001298:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800129c:	627b      	str	r3, [r7, #36]	@ 0x24
 800129e:	e002      	b.n	80012a6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f000 f989 	bl	80015b8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d024      	beq.n	80012fa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 f963 	bl	8001590 <HAL_CAN_TxMailbox1CompleteCallback>
 80012ca:	e016      	b.n	80012fa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d004      	beq.n	80012e0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80012d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80012de:	e00c      	b.n	80012fa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d004      	beq.n	80012f4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80012ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80012f2:	e002      	b.n	80012fa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f000 f969 	bl	80015cc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d024      	beq.n	800134e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800130c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 f943 	bl	80015a4 <HAL_CAN_TxMailbox2CompleteCallback>
 800131e:	e016      	b.n	800134e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d004      	beq.n	8001334 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800132a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001330:	627b      	str	r3, [r7, #36]	@ 0x24
 8001332:	e00c      	b.n	800134e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d004      	beq.n	8001348 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800133e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001340:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24
 8001346:	e002      	b.n	800134e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f000 f949 	bl	80015e0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800134e:	6a3b      	ldr	r3, [r7, #32]
 8001350:	f003 0308 	and.w	r3, r3, #8
 8001354:	2b00      	cmp	r3, #0
 8001356:	d00c      	beq.n	8001372 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	f003 0310 	and.w	r3, r3, #16
 800135e:	2b00      	cmp	r3, #0
 8001360:	d007      	beq.n	8001372 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001364:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001368:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2210      	movs	r2, #16
 8001370:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001372:	6a3b      	ldr	r3, [r7, #32]
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	2b00      	cmp	r3, #0
 800137a:	d00b      	beq.n	8001394 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	2b00      	cmp	r3, #0
 8001384:	d006      	beq.n	8001394 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2208      	movs	r2, #8
 800138c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 f930 	bl	80015f4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001394:	6a3b      	ldr	r3, [r7, #32]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d009      	beq.n	80013b2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	f003 0303 	and.w	r3, r3, #3
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d002      	beq.n	80013b2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7fe ffbb 	bl	8000328 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80013b2:	6a3b      	ldr	r3, [r7, #32]
 80013b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d00c      	beq.n	80013d6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	f003 0310 	and.w	r3, r3, #16
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d007      	beq.n	80013d6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80013c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2210      	movs	r2, #16
 80013d4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80013d6:	6a3b      	ldr	r3, [r7, #32]
 80013d8:	f003 0320 	and.w	r3, r3, #32
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00b      	beq.n	80013f8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d006      	beq.n	80013f8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2208      	movs	r2, #8
 80013f0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 f912 	bl	800161c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80013f8:	6a3b      	ldr	r3, [r7, #32]
 80013fa:	f003 0310 	and.w	r3, r3, #16
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d009      	beq.n	8001416 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	f003 0303 	and.w	r3, r3, #3
 800140c:	2b00      	cmp	r3, #0
 800140e:	d002      	beq.n	8001416 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f000 f8f9 	bl	8001608 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001416:	6a3b      	ldr	r3, [r7, #32]
 8001418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d00b      	beq.n	8001438 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f003 0310 	and.w	r3, r3, #16
 8001426:	2b00      	cmp	r3, #0
 8001428:	d006      	beq.n	8001438 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2210      	movs	r2, #16
 8001430:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 f8fc 	bl	8001630 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001438:	6a3b      	ldr	r3, [r7, #32]
 800143a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00b      	beq.n	800145a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	f003 0308 	and.w	r3, r3, #8
 8001448:	2b00      	cmp	r3, #0
 800144a:	d006      	beq.n	800145a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2208      	movs	r2, #8
 8001452:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f000 f8f5 	bl	8001644 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800145a:	6a3b      	ldr	r3, [r7, #32]
 800145c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d07b      	beq.n	800155c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	f003 0304 	and.w	r3, r3, #4
 800146a:	2b00      	cmp	r3, #0
 800146c:	d072      	beq.n	8001554 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800146e:	6a3b      	ldr	r3, [r7, #32]
 8001470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001474:	2b00      	cmp	r3, #0
 8001476:	d008      	beq.n	800148a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800148a:	6a3b      	ldr	r3, [r7, #32]
 800148c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001490:	2b00      	cmp	r3, #0
 8001492:	d008      	beq.n	80014a6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800149e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014a6:	6a3b      	ldr	r3, [r7, #32]
 80014a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d008      	beq.n	80014c2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80014ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014c2:	6a3b      	ldr	r3, [r7, #32]
 80014c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d043      	beq.n	8001554 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d03e      	beq.n	8001554 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80014dc:	2b60      	cmp	r3, #96	@ 0x60
 80014de:	d02b      	beq.n	8001538 <HAL_CAN_IRQHandler+0x32a>
 80014e0:	2b60      	cmp	r3, #96	@ 0x60
 80014e2:	d82e      	bhi.n	8001542 <HAL_CAN_IRQHandler+0x334>
 80014e4:	2b50      	cmp	r3, #80	@ 0x50
 80014e6:	d022      	beq.n	800152e <HAL_CAN_IRQHandler+0x320>
 80014e8:	2b50      	cmp	r3, #80	@ 0x50
 80014ea:	d82a      	bhi.n	8001542 <HAL_CAN_IRQHandler+0x334>
 80014ec:	2b40      	cmp	r3, #64	@ 0x40
 80014ee:	d019      	beq.n	8001524 <HAL_CAN_IRQHandler+0x316>
 80014f0:	2b40      	cmp	r3, #64	@ 0x40
 80014f2:	d826      	bhi.n	8001542 <HAL_CAN_IRQHandler+0x334>
 80014f4:	2b30      	cmp	r3, #48	@ 0x30
 80014f6:	d010      	beq.n	800151a <HAL_CAN_IRQHandler+0x30c>
 80014f8:	2b30      	cmp	r3, #48	@ 0x30
 80014fa:	d822      	bhi.n	8001542 <HAL_CAN_IRQHandler+0x334>
 80014fc:	2b10      	cmp	r3, #16
 80014fe:	d002      	beq.n	8001506 <HAL_CAN_IRQHandler+0x2f8>
 8001500:	2b20      	cmp	r3, #32
 8001502:	d005      	beq.n	8001510 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001504:	e01d      	b.n	8001542 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001508:	f043 0308 	orr.w	r3, r3, #8
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800150e:	e019      	b.n	8001544 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001512:	f043 0310 	orr.w	r3, r3, #16
 8001516:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001518:	e014      	b.n	8001544 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800151a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151c:	f043 0320 	orr.w	r3, r3, #32
 8001520:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001522:	e00f      	b.n	8001544 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001526:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800152a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800152c:	e00a      	b.n	8001544 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800152e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001534:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001536:	e005      	b.n	8001544 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800153e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001540:	e000      	b.n	8001544 <HAL_CAN_IRQHandler+0x336>
            break;
 8001542:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	699a      	ldr	r2, [r3, #24]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001552:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2204      	movs	r2, #4
 800155a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800155c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155e:	2b00      	cmp	r3, #0
 8001560:	d008      	beq.n	8001574 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001568:	431a      	orrs	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f000 f872 	bl	8001658 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001574:	bf00      	nop
 8001576:	3728      	adds	r7, #40	@ 0x28
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800167c:	4b0c      	ldr	r3, [pc, #48]	@ (80016b0 <__NVIC_SetPriorityGrouping+0x44>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001688:	4013      	ands	r3, r2
 800168a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001694:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001698:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800169c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169e:	4a04      	ldr	r2, [pc, #16]	@ (80016b0 <__NVIC_SetPriorityGrouping+0x44>)
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	60d3      	str	r3, [r2, #12]
}
 80016a4:	bf00      	nop
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b8:	4b04      	ldr	r3, [pc, #16]	@ (80016cc <__NVIC_GetPriorityGrouping+0x18>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	0a1b      	lsrs	r3, r3, #8
 80016be:	f003 0307 	and.w	r3, r3, #7
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	db0b      	blt.n	80016fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	f003 021f 	and.w	r2, r3, #31
 80016e8:	4907      	ldr	r1, [pc, #28]	@ (8001708 <__NVIC_EnableIRQ+0x38>)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	095b      	lsrs	r3, r3, #5
 80016f0:	2001      	movs	r0, #1
 80016f2:	fa00 f202 	lsl.w	r2, r0, r2
 80016f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000e100 	.word	0xe000e100

0800170c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	6039      	str	r1, [r7, #0]
 8001716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171c:	2b00      	cmp	r3, #0
 800171e:	db0a      	blt.n	8001736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	b2da      	uxtb	r2, r3
 8001724:	490c      	ldr	r1, [pc, #48]	@ (8001758 <__NVIC_SetPriority+0x4c>)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	0112      	lsls	r2, r2, #4
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	440b      	add	r3, r1
 8001730:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001734:	e00a      	b.n	800174c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4908      	ldr	r1, [pc, #32]	@ (800175c <__NVIC_SetPriority+0x50>)
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	3b04      	subs	r3, #4
 8001744:	0112      	lsls	r2, r2, #4
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	440b      	add	r3, r1
 800174a:	761a      	strb	r2, [r3, #24]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000e100 	.word	0xe000e100
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001760:	b480      	push	{r7}
 8001762:	b089      	sub	sp, #36	@ 0x24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f1c3 0307 	rsb	r3, r3, #7
 800177a:	2b04      	cmp	r3, #4
 800177c:	bf28      	it	cs
 800177e:	2304      	movcs	r3, #4
 8001780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3304      	adds	r3, #4
 8001786:	2b06      	cmp	r3, #6
 8001788:	d902      	bls.n	8001790 <NVIC_EncodePriority+0x30>
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3b03      	subs	r3, #3
 800178e:	e000      	b.n	8001792 <NVIC_EncodePriority+0x32>
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001794:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43da      	mvns	r2, r3
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	401a      	ands	r2, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	fa01 f303 	lsl.w	r3, r1, r3
 80017b2:	43d9      	mvns	r1, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b8:	4313      	orrs	r3, r2
         );
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3724      	adds	r7, #36	@ 0x24
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
	...

080017c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017d8:	d301      	bcc.n	80017de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017da:	2301      	movs	r3, #1
 80017dc:	e00f      	b.n	80017fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017de:	4a0a      	ldr	r2, [pc, #40]	@ (8001808 <SysTick_Config+0x40>)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017e6:	210f      	movs	r1, #15
 80017e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017ec:	f7ff ff8e 	bl	800170c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f0:	4b05      	ldr	r3, [pc, #20]	@ (8001808 <SysTick_Config+0x40>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f6:	4b04      	ldr	r3, [pc, #16]	@ (8001808 <SysTick_Config+0x40>)
 80017f8:	2207      	movs	r2, #7
 80017fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	e000e010 	.word	0xe000e010

0800180c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff ff29 	bl	800166c <__NVIC_SetPriorityGrouping>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b086      	sub	sp, #24
 8001826:	af00      	add	r7, sp, #0
 8001828:	4603      	mov	r3, r0
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
 800182e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001834:	f7ff ff3e 	bl	80016b4 <__NVIC_GetPriorityGrouping>
 8001838:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	68b9      	ldr	r1, [r7, #8]
 800183e:	6978      	ldr	r0, [r7, #20]
 8001840:	f7ff ff8e 	bl	8001760 <NVIC_EncodePriority>
 8001844:	4602      	mov	r2, r0
 8001846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184a:	4611      	mov	r1, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff5d 	bl	800170c <__NVIC_SetPriority>
}
 8001852:	bf00      	nop
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	4603      	mov	r3, r0
 8001862:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff31 	bl	80016d0 <__NVIC_EnableIRQ>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff ffa2 	bl	80017c8 <SysTick_Config>
 8001884:	4603      	mov	r3, r0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80018a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001960 <HAL_FLASH_Program+0xd0>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d101      	bne.n	80018ae <HAL_FLASH_Program+0x1e>
 80018aa:	2302      	movs	r3, #2
 80018ac:	e053      	b.n	8001956 <HAL_FLASH_Program+0xc6>
 80018ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001960 <HAL_FLASH_Program+0xd0>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018b4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80018b8:	f000 f888 	bl	80019cc <FLASH_WaitForLastOperation>
 80018bc:	4603      	mov	r3, r0
 80018be:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80018c0:	7dfb      	ldrb	r3, [r7, #23]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d143      	bne.n	800194e <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80018c6:	4b26      	ldr	r3, [pc, #152]	@ (8001960 <HAL_FLASH_Program+0xd0>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80018cc:	4b25      	ldr	r3, [pc, #148]	@ (8001964 <HAL_FLASH_Program+0xd4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d009      	beq.n	80018ec <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80018d8:	4b22      	ldr	r3, [pc, #136]	@ (8001964 <HAL_FLASH_Program+0xd4>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a21      	ldr	r2, [pc, #132]	@ (8001964 <HAL_FLASH_Program+0xd4>)
 80018de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80018e2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80018e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001960 <HAL_FLASH_Program+0xd0>)
 80018e6:	2202      	movs	r2, #2
 80018e8:	771a      	strb	r2, [r3, #28]
 80018ea:	e002      	b.n	80018f2 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80018ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001960 <HAL_FLASH_Program+0xd0>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d107      	bne.n	8001908 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80018f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018fc:	68b8      	ldr	r0, [r7, #8]
 80018fe:	f000 f8bb 	bl	8001a78 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8001902:	2301      	movs	r3, #1
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	e010      	b.n	800192a <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d002      	beq.n	8001914 <HAL_FLASH_Program+0x84>
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2b02      	cmp	r3, #2
 8001912:	d10a      	bne.n	800192a <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	4619      	mov	r1, r3
 8001918:	68b8      	ldr	r0, [r7, #8]
 800191a:	f000 f8d3 	bl	8001ac4 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2b02      	cmp	r3, #2
 8001922:	d102      	bne.n	800192a <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8001924:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001928:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800192a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800192e:	f000 f84d 	bl	80019cc <FLASH_WaitForLastOperation>
 8001932:	4603      	mov	r3, r0
 8001934:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d006      	beq.n	800194a <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800193c:	4b09      	ldr	r3, [pc, #36]	@ (8001964 <HAL_FLASH_Program+0xd4>)
 800193e:	695a      	ldr	r2, [r3, #20]
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	43db      	mvns	r3, r3
 8001944:	4907      	ldr	r1, [pc, #28]	@ (8001964 <HAL_FLASH_Program+0xd4>)
 8001946:	4013      	ands	r3, r2
 8001948:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800194a:	f000 f9cd 	bl	8001ce8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800194e:	4b04      	ldr	r3, [pc, #16]	@ (8001960 <HAL_FLASH_Program+0xd0>)
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]

  return status;
 8001954:	7dfb      	ldrb	r3, [r7, #23]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	2000000c 	.word	0x2000000c
 8001964:	40022000 	.word	0x40022000

08001968 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800196e:	2300      	movs	r3, #0
 8001970:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001972:	4b0b      	ldr	r3, [pc, #44]	@ (80019a0 <HAL_FLASH_Unlock+0x38>)
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	2b00      	cmp	r3, #0
 8001978:	da0b      	bge.n	8001992 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800197a:	4b09      	ldr	r3, [pc, #36]	@ (80019a0 <HAL_FLASH_Unlock+0x38>)
 800197c:	4a09      	ldr	r2, [pc, #36]	@ (80019a4 <HAL_FLASH_Unlock+0x3c>)
 800197e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001980:	4b07      	ldr	r3, [pc, #28]	@ (80019a0 <HAL_FLASH_Unlock+0x38>)
 8001982:	4a09      	ldr	r2, [pc, #36]	@ (80019a8 <HAL_FLASH_Unlock+0x40>)
 8001984:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001986:	4b06      	ldr	r3, [pc, #24]	@ (80019a0 <HAL_FLASH_Unlock+0x38>)
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	2b00      	cmp	r3, #0
 800198c:	da01      	bge.n	8001992 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001992:	79fb      	ldrb	r3, [r7, #7]
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	40022000 	.word	0x40022000
 80019a4:	45670123 	.word	0x45670123
 80019a8:	cdef89ab 	.word	0xcdef89ab

080019ac <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80019b0:	4b05      	ldr	r3, [pc, #20]	@ (80019c8 <HAL_FLASH_Lock+0x1c>)
 80019b2:	695b      	ldr	r3, [r3, #20]
 80019b4:	4a04      	ldr	r2, [pc, #16]	@ (80019c8 <HAL_FLASH_Lock+0x1c>)
 80019b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80019ba:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	40022000 	.word	0x40022000

080019cc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80019d4:	f7fe ffca 	bl	800096c <HAL_GetTick>
 80019d8:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80019da:	e00d      	b.n	80019f8 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019e2:	d009      	beq.n	80019f8 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80019e4:	f7fe ffc2 	bl	800096c <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d801      	bhi.n	80019f8 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e035      	b.n	8001a64 <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80019f8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a6c <FLASH_WaitForLastOperation+0xa0>)
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1eb      	bne.n	80019dc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001a04:	4b19      	ldr	r3, [pc, #100]	@ (8001a6c <FLASH_WaitForLastOperation+0xa0>)
 8001a06:	691a      	ldr	r2, [r3, #16]
 8001a08:	4b19      	ldr	r3, [pc, #100]	@ (8001a70 <FLASH_WaitForLastOperation+0xa4>)
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d01d      	beq.n	8001a50 <FLASH_WaitForLastOperation+0x84>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8001a14:	4b17      	ldr	r3, [pc, #92]	@ (8001a74 <FLASH_WaitForLastOperation+0xa8>)
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	4a15      	ldr	r2, [pc, #84]	@ (8001a74 <FLASH_WaitForLastOperation+0xa8>)
 8001a1e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a26:	d307      	bcc.n	8001a38 <FLASH_WaitForLastOperation+0x6c>
 8001a28:	4b10      	ldr	r3, [pc, #64]	@ (8001a6c <FLASH_WaitForLastOperation+0xa0>)
 8001a2a:	699a      	ldr	r2, [r3, #24]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8001a32:	490e      	ldr	r1, [pc, #56]	@ (8001a6c <FLASH_WaitForLastOperation+0xa0>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	618b      	str	r3, [r1, #24]
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d004      	beq.n	8001a4c <FLASH_WaitForLastOperation+0x80>
 8001a42:	4a0a      	ldr	r2, [pc, #40]	@ (8001a6c <FLASH_WaitForLastOperation+0xa0>)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8001a4a:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e009      	b.n	8001a64 <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001a50:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <FLASH_WaitForLastOperation+0xa0>)
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d002      	beq.n	8001a62 <FLASH_WaitForLastOperation+0x96>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001a5c:	4b03      	ldr	r3, [pc, #12]	@ (8001a6c <FLASH_WaitForLastOperation+0xa0>)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40022000 	.word	0x40022000
 8001a70:	0002c3fa 	.word	0x0002c3fa
 8001a74:	2000000c 	.word	0x2000000c

08001a78 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001a84:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac0 <FLASH_Program_DoubleWord+0x48>)
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	4a0d      	ldr	r2, [pc, #52]	@ (8001ac0 <FLASH_Program_DoubleWord+0x48>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001a96:	f3bf 8f6f 	isb	sy
}
 8001a9a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8001a9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	000a      	movs	r2, r1
 8001aaa:	2300      	movs	r3, #0
 8001aac:	68f9      	ldr	r1, [r7, #12]
 8001aae:	3104      	adds	r1, #4
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	600b      	str	r3, [r1, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	40022000 	.word	0x40022000

08001ac4 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b089      	sub	sp, #36	@ 0x24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8001ace:	2340      	movs	r3, #64	@ 0x40
 8001ad0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8001ada:	4b14      	ldr	r3, [pc, #80]	@ (8001b2c <FLASH_Program_Fast+0x68>)
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	4a13      	ldr	r2, [pc, #76]	@ (8001b2c <FLASH_Program_Fast+0x68>)
 8001ae0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ae4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ae6:	f3ef 8310 	mrs	r3, PRIMASK
 8001aea:	60fb      	str	r3, [r7, #12]
  return(result);
 8001aec:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8001aee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001af0:	b672      	cpsid	i
}
 8001af2:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	3304      	adds	r3, #4
 8001b00:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	3304      	adds	r3, #4
 8001b06:	617b      	str	r3, [r7, #20]
    row_index--;
 8001b08:	7ffb      	ldrb	r3, [r7, #31]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8001b0e:	7ffb      	ldrb	r3, [r7, #31]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1ef      	bne.n	8001af4 <FLASH_Program_Fast+0x30>
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	f383 8810 	msr	PRIMASK, r3
}
 8001b1e:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8001b20:	bf00      	nop
 8001b22:	3724      	adds	r7, #36	@ 0x24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	40022000 	.word	0x40022000

08001b30 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001b3a:	4b48      	ldr	r3, [pc, #288]	@ (8001c5c <HAL_FLASHEx_Erase+0x12c>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d101      	bne.n	8001b46 <HAL_FLASHEx_Erase+0x16>
 8001b42:	2302      	movs	r3, #2
 8001b44:	e085      	b.n	8001c52 <HAL_FLASHEx_Erase+0x122>
 8001b46:	4b45      	ldr	r3, [pc, #276]	@ (8001c5c <HAL_FLASHEx_Erase+0x12c>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b4c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001b50:	f7ff ff3c 	bl	80019cc <FLASH_WaitForLastOperation>
 8001b54:	4603      	mov	r3, r0
 8001b56:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d175      	bne.n	8001c4a <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b5e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c5c <HAL_FLASHEx_Erase+0x12c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8001b64:	4b3e      	ldr	r3, [pc, #248]	@ (8001c60 <HAL_FLASHEx_Erase+0x130>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d013      	beq.n	8001b98 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001b70:	4b3b      	ldr	r3, [pc, #236]	@ (8001c60 <HAL_FLASHEx_Erase+0x130>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d009      	beq.n	8001b90 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8001b7c:	4b38      	ldr	r3, [pc, #224]	@ (8001c60 <HAL_FLASHEx_Erase+0x130>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a37      	ldr	r2, [pc, #220]	@ (8001c60 <HAL_FLASHEx_Erase+0x130>)
 8001b82:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001b86:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8001b88:	4b34      	ldr	r3, [pc, #208]	@ (8001c5c <HAL_FLASHEx_Erase+0x12c>)
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	771a      	strb	r2, [r3, #28]
 8001b8e:	e016      	b.n	8001bbe <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8001b90:	4b32      	ldr	r3, [pc, #200]	@ (8001c5c <HAL_FLASHEx_Erase+0x12c>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	771a      	strb	r2, [r3, #28]
 8001b96:	e012      	b.n	8001bbe <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001b98:	4b31      	ldr	r3, [pc, #196]	@ (8001c60 <HAL_FLASHEx_Erase+0x130>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d009      	beq.n	8001bb8 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001ba4:	4b2e      	ldr	r3, [pc, #184]	@ (8001c60 <HAL_FLASHEx_Erase+0x130>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a2d      	ldr	r2, [pc, #180]	@ (8001c60 <HAL_FLASHEx_Erase+0x130>)
 8001baa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001bae:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c5c <HAL_FLASHEx_Erase+0x12c>)
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	771a      	strb	r2, [r3, #28]
 8001bb6:	e002      	b.n	8001bbe <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001bb8:	4b28      	ldr	r3, [pc, #160]	@ (8001c5c <HAL_FLASHEx_Erase+0x12c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d111      	bne.n	8001bea <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 f84a 	bl	8001c64 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001bd0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001bd4:	f7ff fefa 	bl	80019cc <FLASH_WaitForLastOperation>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8001bdc:	4b20      	ldr	r3, [pc, #128]	@ (8001c60 <HAL_FLASHEx_Erase+0x130>)
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	4a1f      	ldr	r2, [pc, #124]	@ (8001c60 <HAL_FLASHEx_Erase+0x130>)
 8001be2:	f023 0304 	bic.w	r3, r3, #4
 8001be6:	6153      	str	r3, [r2, #20]
 8001be8:	e02d      	b.n	8001c46 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001bf0:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	e01d      	b.n	8001c36 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	4619      	mov	r1, r3
 8001c00:	68b8      	ldr	r0, [r7, #8]
 8001c02:	f000 f84d 	bl	8001ca0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c06:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001c0a:	f7ff fedf 	bl	80019cc <FLASH_WaitForLastOperation>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8001c12:	4b13      	ldr	r3, [pc, #76]	@ (8001c60 <HAL_FLASHEx_Erase+0x130>)
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	4a12      	ldr	r2, [pc, #72]	@ (8001c60 <HAL_FLASHEx_Erase+0x130>)
 8001c18:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8001c1c:	f023 0302 	bic.w	r3, r3, #2
 8001c20:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	601a      	str	r2, [r3, #0]
          break;
 8001c2e:	e00a      	b.n	8001c46 <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	3301      	adds	r3, #1
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	4413      	add	r3, r2
 8001c40:	68ba      	ldr	r2, [r7, #8]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d3d9      	bcc.n	8001bfa <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001c46:	f000 f84f 	bl	8001ce8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001c4a:	4b04      	ldr	r3, [pc, #16]	@ (8001c5c <HAL_FLASHEx_Erase+0x12c>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]

  return status;
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	2000000c 	.word	0x2000000c
 8001c60:	40022000 	.word	0x40022000

08001c64 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d005      	beq.n	8001c82 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8001c76:	4b09      	ldr	r3, [pc, #36]	@ (8001c9c <FLASH_MassErase+0x38>)
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	4a08      	ldr	r2, [pc, #32]	@ (8001c9c <FLASH_MassErase+0x38>)
 8001c7c:	f043 0304 	orr.w	r3, r3, #4
 8001c80:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001c82:	4b06      	ldr	r3, [pc, #24]	@ (8001c9c <FLASH_MassErase+0x38>)
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	4a05      	ldr	r2, [pc, #20]	@ (8001c9c <FLASH_MassErase+0x38>)
 8001c88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c8c:	6153      	str	r3, [r2, #20]
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40022000 	.word	0x40022000

08001ca0 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8001caa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce4 <FLASH_PageErase+0x44>)
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 8001cba:	490a      	ldr	r1, [pc, #40]	@ (8001ce4 <FLASH_PageErase+0x44>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001cc0:	4b08      	ldr	r3, [pc, #32]	@ (8001ce4 <FLASH_PageErase+0x44>)
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	4a07      	ldr	r2, [pc, #28]	@ (8001ce4 <FLASH_PageErase+0x44>)
 8001cc6:	f043 0302 	orr.w	r3, r3, #2
 8001cca:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001ccc:	4b05      	ldr	r3, [pc, #20]	@ (8001ce4 <FLASH_PageErase+0x44>)
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	4a04      	ldr	r2, [pc, #16]	@ (8001ce4 <FLASH_PageErase+0x44>)
 8001cd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cd6:	6153      	str	r3, [r2, #20]
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	40022000 	.word	0x40022000

08001ce8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8001cee:	4b21      	ldr	r3, [pc, #132]	@ (8001d74 <FLASH_FlushCaches+0x8c>)
 8001cf0:	7f1b      	ldrb	r3, [r3, #28]
 8001cf2:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d002      	beq.n	8001d00 <FLASH_FlushCaches+0x18>
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	2b03      	cmp	r3, #3
 8001cfe:	d117      	bne.n	8001d30 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001d00:	4b1d      	ldr	r3, [pc, #116]	@ (8001d78 <FLASH_FlushCaches+0x90>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a1c      	ldr	r2, [pc, #112]	@ (8001d78 <FLASH_FlushCaches+0x90>)
 8001d06:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001d0a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001d78 <FLASH_FlushCaches+0x90>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a19      	ldr	r2, [pc, #100]	@ (8001d78 <FLASH_FlushCaches+0x90>)
 8001d12:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	4b17      	ldr	r3, [pc, #92]	@ (8001d78 <FLASH_FlushCaches+0x90>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a16      	ldr	r2, [pc, #88]	@ (8001d78 <FLASH_FlushCaches+0x90>)
 8001d1e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001d22:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d24:	4b14      	ldr	r3, [pc, #80]	@ (8001d78 <FLASH_FlushCaches+0x90>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a13      	ldr	r2, [pc, #76]	@ (8001d78 <FLASH_FlushCaches+0x90>)
 8001d2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d2e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d002      	beq.n	8001d3c <FLASH_FlushCaches+0x54>
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	2b03      	cmp	r3, #3
 8001d3a:	d111      	bne.n	8001d60 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d78 <FLASH_FlushCaches+0x90>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a0d      	ldr	r2, [pc, #52]	@ (8001d78 <FLASH_FlushCaches+0x90>)
 8001d42:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	4b0b      	ldr	r3, [pc, #44]	@ (8001d78 <FLASH_FlushCaches+0x90>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d78 <FLASH_FlushCaches+0x90>)
 8001d4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001d52:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d54:	4b08      	ldr	r3, [pc, #32]	@ (8001d78 <FLASH_FlushCaches+0x90>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a07      	ldr	r2, [pc, #28]	@ (8001d78 <FLASH_FlushCaches+0x90>)
 8001d5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d5e:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001d60:	4b04      	ldr	r3, [pc, #16]	@ (8001d74 <FLASH_FlushCaches+0x8c>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	771a      	strb	r2, [r3, #28]
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	2000000c 	.word	0x2000000c
 8001d78:	40022000 	.word	0x40022000

08001d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b087      	sub	sp, #28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d8a:	e148      	b.n	800201e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	2101      	movs	r1, #1
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	fa01 f303 	lsl.w	r3, r1, r3
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 813a 	beq.w	8002018 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d005      	beq.n	8001dbc <HAL_GPIO_Init+0x40>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d130      	bne.n	8001e1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001df2:	2201      	movs	r2, #1
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	091b      	lsrs	r3, r3, #4
 8001e08:	f003 0201 	and.w	r2, r3, #1
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d017      	beq.n	8001e5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	2203      	movs	r2, #3
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d123      	bne.n	8001eae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	08da      	lsrs	r2, r3, #3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3208      	adds	r2, #8
 8001e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	220f      	movs	r2, #15
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4013      	ands	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	691a      	ldr	r2, [r3, #16]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	08da      	lsrs	r2, r3, #3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3208      	adds	r2, #8
 8001ea8:	6939      	ldr	r1, [r7, #16]
 8001eaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	2203      	movs	r2, #3
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 0203 	and.w	r2, r3, #3
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 8094 	beq.w	8002018 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef0:	4b52      	ldr	r3, [pc, #328]	@ (800203c <HAL_GPIO_Init+0x2c0>)
 8001ef2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ef4:	4a51      	ldr	r2, [pc, #324]	@ (800203c <HAL_GPIO_Init+0x2c0>)
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	6613      	str	r3, [r2, #96]	@ 0x60
 8001efc:	4b4f      	ldr	r3, [pc, #316]	@ (800203c <HAL_GPIO_Init+0x2c0>)
 8001efe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f08:	4a4d      	ldr	r2, [pc, #308]	@ (8002040 <HAL_GPIO_Init+0x2c4>)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	089b      	lsrs	r3, r3, #2
 8001f0e:	3302      	adds	r3, #2
 8001f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	220f      	movs	r2, #15
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f32:	d00d      	beq.n	8001f50 <HAL_GPIO_Init+0x1d4>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a43      	ldr	r2, [pc, #268]	@ (8002044 <HAL_GPIO_Init+0x2c8>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d007      	beq.n	8001f4c <HAL_GPIO_Init+0x1d0>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a42      	ldr	r2, [pc, #264]	@ (8002048 <HAL_GPIO_Init+0x2cc>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d101      	bne.n	8001f48 <HAL_GPIO_Init+0x1cc>
 8001f44:	2302      	movs	r3, #2
 8001f46:	e004      	b.n	8001f52 <HAL_GPIO_Init+0x1d6>
 8001f48:	2307      	movs	r3, #7
 8001f4a:	e002      	b.n	8001f52 <HAL_GPIO_Init+0x1d6>
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e000      	b.n	8001f52 <HAL_GPIO_Init+0x1d6>
 8001f50:	2300      	movs	r3, #0
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	f002 0203 	and.w	r2, r2, #3
 8001f58:	0092      	lsls	r2, r2, #2
 8001f5a:	4093      	lsls	r3, r2
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f62:	4937      	ldr	r1, [pc, #220]	@ (8002040 <HAL_GPIO_Init+0x2c4>)
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	089b      	lsrs	r3, r3, #2
 8001f68:	3302      	adds	r3, #2
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f70:	4b36      	ldr	r3, [pc, #216]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f94:	4a2d      	ldr	r2, [pc, #180]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f9a:	4b2c      	ldr	r3, [pc, #176]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fbe:	4a23      	ldr	r2, [pc, #140]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fc4:	4b21      	ldr	r3, [pc, #132]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fe8:	4a18      	ldr	r2, [pc, #96]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001fee:	4b17      	ldr	r3, [pc, #92]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4313      	orrs	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002012:	4a0e      	ldr	r2, [pc, #56]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	3301      	adds	r3, #1
 800201c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	fa22 f303 	lsr.w	r3, r2, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	f47f aeaf 	bne.w	8001d8c <HAL_GPIO_Init+0x10>
  }
}
 800202e:	bf00      	nop
 8002030:	bf00      	nop
 8002032:	371c      	adds	r7, #28
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	40021000 	.word	0x40021000
 8002040:	40010000 	.word	0x40010000
 8002044:	48000400 	.word	0x48000400
 8002048:	48000800 	.word	0x48000800
 800204c:	40010400 	.word	0x40010400

08002050 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002054:	4b04      	ldr	r3, [pc, #16]	@ (8002068 <HAL_PWREx_GetVoltageRange+0x18>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800205c:	4618      	mov	r0, r3
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	40007000 	.word	0x40007000

0800206c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800207a:	d130      	bne.n	80020de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800207c:	4b23      	ldr	r3, [pc, #140]	@ (800210c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002084:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002088:	d038      	beq.n	80020fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800208a:	4b20      	ldr	r3, [pc, #128]	@ (800210c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002092:	4a1e      	ldr	r2, [pc, #120]	@ (800210c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002094:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002098:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800209a:	4b1d      	ldr	r3, [pc, #116]	@ (8002110 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2232      	movs	r2, #50	@ 0x32
 80020a0:	fb02 f303 	mul.w	r3, r2, r3
 80020a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80020a6:	fba2 2303 	umull	r2, r3, r2, r3
 80020aa:	0c9b      	lsrs	r3, r3, #18
 80020ac:	3301      	adds	r3, #1
 80020ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020b0:	e002      	b.n	80020b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	3b01      	subs	r3, #1
 80020b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020b8:	4b14      	ldr	r3, [pc, #80]	@ (800210c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020c4:	d102      	bne.n	80020cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1f2      	bne.n	80020b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020cc:	4b0f      	ldr	r3, [pc, #60]	@ (800210c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020d8:	d110      	bne.n	80020fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e00f      	b.n	80020fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80020de:	4b0b      	ldr	r3, [pc, #44]	@ (800210c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ea:	d007      	beq.n	80020fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020ec:	4b07      	ldr	r3, [pc, #28]	@ (800210c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020f4:	4a05      	ldr	r2, [pc, #20]	@ (800210c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	40007000 	.word	0x40007000
 8002110:	20000000 	.word	0x20000000
 8002114:	431bde83 	.word	0x431bde83

08002118 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d102      	bne.n	800212c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	f000 bc02 	b.w	8002930 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800212c:	4b96      	ldr	r3, [pc, #600]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 030c 	and.w	r3, r3, #12
 8002134:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002136:	4b94      	ldr	r3, [pc, #592]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0310 	and.w	r3, r3, #16
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 80e4 	beq.w	8002316 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d007      	beq.n	8002164 <HAL_RCC_OscConfig+0x4c>
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	2b0c      	cmp	r3, #12
 8002158:	f040 808b 	bne.w	8002272 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	2b01      	cmp	r3, #1
 8002160:	f040 8087 	bne.w	8002272 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002164:	4b88      	ldr	r3, [pc, #544]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d005      	beq.n	800217c <HAL_RCC_OscConfig+0x64>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e3d9      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a1a      	ldr	r2, [r3, #32]
 8002180:	4b81      	ldr	r3, [pc, #516]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0308 	and.w	r3, r3, #8
 8002188:	2b00      	cmp	r3, #0
 800218a:	d004      	beq.n	8002196 <HAL_RCC_OscConfig+0x7e>
 800218c:	4b7e      	ldr	r3, [pc, #504]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002194:	e005      	b.n	80021a2 <HAL_RCC_OscConfig+0x8a>
 8002196:	4b7c      	ldr	r3, [pc, #496]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 8002198:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800219c:	091b      	lsrs	r3, r3, #4
 800219e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d223      	bcs.n	80021ee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 fd54 	bl	8002c58 <RCC_SetFlashLatencyFromMSIRange>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e3ba      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021ba:	4b73      	ldr	r3, [pc, #460]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a72      	ldr	r2, [pc, #456]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 80021c0:	f043 0308 	orr.w	r3, r3, #8
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	4b70      	ldr	r3, [pc, #448]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	496d      	ldr	r1, [pc, #436]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021d8:	4b6b      	ldr	r3, [pc, #428]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	021b      	lsls	r3, r3, #8
 80021e6:	4968      	ldr	r1, [pc, #416]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	604b      	str	r3, [r1, #4]
 80021ec:	e025      	b.n	800223a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021ee:	4b66      	ldr	r3, [pc, #408]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a65      	ldr	r2, [pc, #404]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 80021f4:	f043 0308 	orr.w	r3, r3, #8
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	4b63      	ldr	r3, [pc, #396]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	4960      	ldr	r1, [pc, #384]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 8002208:	4313      	orrs	r3, r2
 800220a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800220c:	4b5e      	ldr	r3, [pc, #376]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	021b      	lsls	r3, r3, #8
 800221a:	495b      	ldr	r1, [pc, #364]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 800221c:	4313      	orrs	r3, r2
 800221e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d109      	bne.n	800223a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	4618      	mov	r0, r3
 800222c:	f000 fd14 	bl	8002c58 <RCC_SetFlashLatencyFromMSIRange>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e37a      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800223a:	f000 fc81 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 800223e:	4602      	mov	r2, r0
 8002240:	4b51      	ldr	r3, [pc, #324]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	091b      	lsrs	r3, r3, #4
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	4950      	ldr	r1, [pc, #320]	@ (800238c <HAL_RCC_OscConfig+0x274>)
 800224c:	5ccb      	ldrb	r3, [r1, r3]
 800224e:	f003 031f 	and.w	r3, r3, #31
 8002252:	fa22 f303 	lsr.w	r3, r2, r3
 8002256:	4a4e      	ldr	r2, [pc, #312]	@ (8002390 <HAL_RCC_OscConfig+0x278>)
 8002258:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800225a:	4b4e      	ldr	r3, [pc, #312]	@ (8002394 <HAL_RCC_OscConfig+0x27c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe fb34 	bl	80008cc <HAL_InitTick>
 8002264:	4603      	mov	r3, r0
 8002266:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d052      	beq.n	8002314 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	e35e      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d032      	beq.n	80022e0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800227a:	4b43      	ldr	r3, [pc, #268]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a42      	ldr	r2, [pc, #264]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002286:	f7fe fb71 	bl	800096c <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800228e:	f7fe fb6d 	bl	800096c <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e347      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022a0:	4b39      	ldr	r3, [pc, #228]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f0      	beq.n	800228e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022ac:	4b36      	ldr	r3, [pc, #216]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a35      	ldr	r2, [pc, #212]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 80022b2:	f043 0308 	orr.w	r3, r3, #8
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	4b33      	ldr	r3, [pc, #204]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	4930      	ldr	r1, [pc, #192]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	021b      	lsls	r3, r3, #8
 80022d8:	492b      	ldr	r1, [pc, #172]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	604b      	str	r3, [r1, #4]
 80022de:	e01a      	b.n	8002316 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022e0:	4b29      	ldr	r3, [pc, #164]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a28      	ldr	r2, [pc, #160]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 80022e6:	f023 0301 	bic.w	r3, r3, #1
 80022ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022ec:	f7fe fb3e 	bl	800096c <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022f4:	f7fe fb3a 	bl	800096c <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e314      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002306:	4b20      	ldr	r3, [pc, #128]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f0      	bne.n	80022f4 <HAL_RCC_OscConfig+0x1dc>
 8002312:	e000      	b.n	8002316 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002314:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d073      	beq.n	800240a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	2b08      	cmp	r3, #8
 8002326:	d005      	beq.n	8002334 <HAL_RCC_OscConfig+0x21c>
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	2b0c      	cmp	r3, #12
 800232c:	d10e      	bne.n	800234c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2b03      	cmp	r3, #3
 8002332:	d10b      	bne.n	800234c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002334:	4b14      	ldr	r3, [pc, #80]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d063      	beq.n	8002408 <HAL_RCC_OscConfig+0x2f0>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d15f      	bne.n	8002408 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e2f1      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002354:	d106      	bne.n	8002364 <HAL_RCC_OscConfig+0x24c>
 8002356:	4b0c      	ldr	r3, [pc, #48]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a0b      	ldr	r2, [pc, #44]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 800235c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	e025      	b.n	80023b0 <HAL_RCC_OscConfig+0x298>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800236c:	d114      	bne.n	8002398 <HAL_RCC_OscConfig+0x280>
 800236e:	4b06      	ldr	r3, [pc, #24]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a05      	ldr	r2, [pc, #20]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 8002374:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	4b03      	ldr	r3, [pc, #12]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a02      	ldr	r2, [pc, #8]	@ (8002388 <HAL_RCC_OscConfig+0x270>)
 8002380:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	e013      	b.n	80023b0 <HAL_RCC_OscConfig+0x298>
 8002388:	40021000 	.word	0x40021000
 800238c:	08002d88 	.word	0x08002d88
 8002390:	20000000 	.word	0x20000000
 8002394:	20000004 	.word	0x20000004
 8002398:	4ba0      	ldr	r3, [pc, #640]	@ (800261c <HAL_RCC_OscConfig+0x504>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a9f      	ldr	r2, [pc, #636]	@ (800261c <HAL_RCC_OscConfig+0x504>)
 800239e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	4b9d      	ldr	r3, [pc, #628]	@ (800261c <HAL_RCC_OscConfig+0x504>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a9c      	ldr	r2, [pc, #624]	@ (800261c <HAL_RCC_OscConfig+0x504>)
 80023aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d013      	beq.n	80023e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7fe fad8 	bl	800096c <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c0:	f7fe fad4 	bl	800096c <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b64      	cmp	r3, #100	@ 0x64
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e2ae      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023d2:	4b92      	ldr	r3, [pc, #584]	@ (800261c <HAL_RCC_OscConfig+0x504>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <HAL_RCC_OscConfig+0x2a8>
 80023de:	e014      	b.n	800240a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e0:	f7fe fac4 	bl	800096c <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e8:	f7fe fac0 	bl	800096c <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b64      	cmp	r3, #100	@ 0x64
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e29a      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023fa:	4b88      	ldr	r3, [pc, #544]	@ (800261c <HAL_RCC_OscConfig+0x504>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x2d0>
 8002406:	e000      	b.n	800240a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d060      	beq.n	80024d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	2b04      	cmp	r3, #4
 800241a:	d005      	beq.n	8002428 <HAL_RCC_OscConfig+0x310>
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	2b0c      	cmp	r3, #12
 8002420:	d119      	bne.n	8002456 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	2b02      	cmp	r3, #2
 8002426:	d116      	bne.n	8002456 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002428:	4b7c      	ldr	r3, [pc, #496]	@ (800261c <HAL_RCC_OscConfig+0x504>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <HAL_RCC_OscConfig+0x328>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e277      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002440:	4b76      	ldr	r3, [pc, #472]	@ (800261c <HAL_RCC_OscConfig+0x504>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	061b      	lsls	r3, r3, #24
 800244e:	4973      	ldr	r1, [pc, #460]	@ (800261c <HAL_RCC_OscConfig+0x504>)
 8002450:	4313      	orrs	r3, r2
 8002452:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002454:	e040      	b.n	80024d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d023      	beq.n	80024a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800245e:	4b6f      	ldr	r3, [pc, #444]	@ (800261c <HAL_RCC_OscConfig+0x504>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a6e      	ldr	r2, [pc, #440]	@ (800261c <HAL_RCC_OscConfig+0x504>)
 8002464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246a:	f7fe fa7f 	bl	800096c <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002472:	f7fe fa7b 	bl	800096c <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e255      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002484:	4b65      	ldr	r3, [pc, #404]	@ (800261c <HAL_RCC_OscConfig+0x504>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002490:	4b62      	ldr	r3, [pc, #392]	@ (800261c <HAL_RCC_OscConfig+0x504>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	061b      	lsls	r3, r3, #24
 800249e:	495f      	ldr	r1, [pc, #380]	@ (800261c <HAL_RCC_OscConfig+0x504>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	604b      	str	r3, [r1, #4]
 80024a4:	e018      	b.n	80024d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024a6:	4b5d      	ldr	r3, [pc, #372]	@ (800261c <HAL_RCC_OscConfig+0x504>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a5c      	ldr	r2, [pc, #368]	@ (800261c <HAL_RCC_OscConfig+0x504>)
 80024ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b2:	f7fe fa5b 	bl	800096c <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ba:	f7fe fa57 	bl	800096c <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e231      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024cc:	4b53      	ldr	r3, [pc, #332]	@ (800261c <HAL_RCC_OscConfig+0x504>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f0      	bne.n	80024ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d03c      	beq.n	800255e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d01c      	beq.n	8002526 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ec:	4b4b      	ldr	r3, [pc, #300]	@ (800261c <HAL_RCC_OscConfig+0x504>)
 80024ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024f2:	4a4a      	ldr	r2, [pc, #296]	@ (800261c <HAL_RCC_OscConfig+0x504>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fc:	f7fe fa36 	bl	800096c <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002504:	f7fe fa32 	bl	800096c <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e20c      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002516:	4b41      	ldr	r3, [pc, #260]	@ (800261c <HAL_RCC_OscConfig+0x504>)
 8002518:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0ef      	beq.n	8002504 <HAL_RCC_OscConfig+0x3ec>
 8002524:	e01b      	b.n	800255e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002526:	4b3d      	ldr	r3, [pc, #244]	@ (800261c <HAL_RCC_OscConfig+0x504>)
 8002528:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800252c:	4a3b      	ldr	r2, [pc, #236]	@ (800261c <HAL_RCC_OscConfig+0x504>)
 800252e:	f023 0301 	bic.w	r3, r3, #1
 8002532:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002536:	f7fe fa19 	bl	800096c <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800253e:	f7fe fa15 	bl	800096c <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e1ef      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002550:	4b32      	ldr	r3, [pc, #200]	@ (800261c <HAL_RCC_OscConfig+0x504>)
 8002552:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1ef      	bne.n	800253e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 80a6 	beq.w	80026b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800256c:	2300      	movs	r3, #0
 800256e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002570:	4b2a      	ldr	r3, [pc, #168]	@ (800261c <HAL_RCC_OscConfig+0x504>)
 8002572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002574:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10d      	bne.n	8002598 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800257c:	4b27      	ldr	r3, [pc, #156]	@ (800261c <HAL_RCC_OscConfig+0x504>)
 800257e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002580:	4a26      	ldr	r2, [pc, #152]	@ (800261c <HAL_RCC_OscConfig+0x504>)
 8002582:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002586:	6593      	str	r3, [r2, #88]	@ 0x58
 8002588:	4b24      	ldr	r3, [pc, #144]	@ (800261c <HAL_RCC_OscConfig+0x504>)
 800258a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800258c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002590:	60bb      	str	r3, [r7, #8]
 8002592:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002594:	2301      	movs	r3, #1
 8002596:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002598:	4b21      	ldr	r3, [pc, #132]	@ (8002620 <HAL_RCC_OscConfig+0x508>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d118      	bne.n	80025d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002620 <HAL_RCC_OscConfig+0x508>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002620 <HAL_RCC_OscConfig+0x508>)
 80025aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025b0:	f7fe f9dc 	bl	800096c <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b8:	f7fe f9d8 	bl	800096c <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e1b2      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025ca:	4b15      	ldr	r3, [pc, #84]	@ (8002620 <HAL_RCC_OscConfig+0x508>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0f0      	beq.n	80025b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d108      	bne.n	80025f0 <HAL_RCC_OscConfig+0x4d8>
 80025de:	4b0f      	ldr	r3, [pc, #60]	@ (800261c <HAL_RCC_OscConfig+0x504>)
 80025e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025e4:	4a0d      	ldr	r2, [pc, #52]	@ (800261c <HAL_RCC_OscConfig+0x504>)
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025ee:	e029      	b.n	8002644 <HAL_RCC_OscConfig+0x52c>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	2b05      	cmp	r3, #5
 80025f6:	d115      	bne.n	8002624 <HAL_RCC_OscConfig+0x50c>
 80025f8:	4b08      	ldr	r3, [pc, #32]	@ (800261c <HAL_RCC_OscConfig+0x504>)
 80025fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025fe:	4a07      	ldr	r2, [pc, #28]	@ (800261c <HAL_RCC_OscConfig+0x504>)
 8002600:	f043 0304 	orr.w	r3, r3, #4
 8002604:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002608:	4b04      	ldr	r3, [pc, #16]	@ (800261c <HAL_RCC_OscConfig+0x504>)
 800260a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800260e:	4a03      	ldr	r2, [pc, #12]	@ (800261c <HAL_RCC_OscConfig+0x504>)
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002618:	e014      	b.n	8002644 <HAL_RCC_OscConfig+0x52c>
 800261a:	bf00      	nop
 800261c:	40021000 	.word	0x40021000
 8002620:	40007000 	.word	0x40007000
 8002624:	4b9a      	ldr	r3, [pc, #616]	@ (8002890 <HAL_RCC_OscConfig+0x778>)
 8002626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800262a:	4a99      	ldr	r2, [pc, #612]	@ (8002890 <HAL_RCC_OscConfig+0x778>)
 800262c:	f023 0301 	bic.w	r3, r3, #1
 8002630:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002634:	4b96      	ldr	r3, [pc, #600]	@ (8002890 <HAL_RCC_OscConfig+0x778>)
 8002636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800263a:	4a95      	ldr	r2, [pc, #596]	@ (8002890 <HAL_RCC_OscConfig+0x778>)
 800263c:	f023 0304 	bic.w	r3, r3, #4
 8002640:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d016      	beq.n	800267a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264c:	f7fe f98e 	bl	800096c <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002652:	e00a      	b.n	800266a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002654:	f7fe f98a 	bl	800096c <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002662:	4293      	cmp	r3, r2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e162      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800266a:	4b89      	ldr	r3, [pc, #548]	@ (8002890 <HAL_RCC_OscConfig+0x778>)
 800266c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0ed      	beq.n	8002654 <HAL_RCC_OscConfig+0x53c>
 8002678:	e015      	b.n	80026a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267a:	f7fe f977 	bl	800096c <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002680:	e00a      	b.n	8002698 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002682:	f7fe f973 	bl	800096c <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002690:	4293      	cmp	r3, r2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e14b      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002698:	4b7d      	ldr	r3, [pc, #500]	@ (8002890 <HAL_RCC_OscConfig+0x778>)
 800269a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1ed      	bne.n	8002682 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026a6:	7ffb      	ldrb	r3, [r7, #31]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d105      	bne.n	80026b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ac:	4b78      	ldr	r3, [pc, #480]	@ (8002890 <HAL_RCC_OscConfig+0x778>)
 80026ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b0:	4a77      	ldr	r2, [pc, #476]	@ (8002890 <HAL_RCC_OscConfig+0x778>)
 80026b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026b6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0320 	and.w	r3, r3, #32
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d03c      	beq.n	800273e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d01c      	beq.n	8002706 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026cc:	4b70      	ldr	r3, [pc, #448]	@ (8002890 <HAL_RCC_OscConfig+0x778>)
 80026ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026d2:	4a6f      	ldr	r2, [pc, #444]	@ (8002890 <HAL_RCC_OscConfig+0x778>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026dc:	f7fe f946 	bl	800096c <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026e4:	f7fe f942 	bl	800096c <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e11c      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026f6:	4b66      	ldr	r3, [pc, #408]	@ (8002890 <HAL_RCC_OscConfig+0x778>)
 80026f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0ef      	beq.n	80026e4 <HAL_RCC_OscConfig+0x5cc>
 8002704:	e01b      	b.n	800273e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002706:	4b62      	ldr	r3, [pc, #392]	@ (8002890 <HAL_RCC_OscConfig+0x778>)
 8002708:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800270c:	4a60      	ldr	r2, [pc, #384]	@ (8002890 <HAL_RCC_OscConfig+0x778>)
 800270e:	f023 0301 	bic.w	r3, r3, #1
 8002712:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002716:	f7fe f929 	bl	800096c <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800271e:	f7fe f925 	bl	800096c <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e0ff      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002730:	4b57      	ldr	r3, [pc, #348]	@ (8002890 <HAL_RCC_OscConfig+0x778>)
 8002732:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1ef      	bne.n	800271e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 80f3 	beq.w	800292e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274c:	2b02      	cmp	r3, #2
 800274e:	f040 80c9 	bne.w	80028e4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002752:	4b4f      	ldr	r3, [pc, #316]	@ (8002890 <HAL_RCC_OscConfig+0x778>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f003 0203 	and.w	r2, r3, #3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002762:	429a      	cmp	r2, r3
 8002764:	d12c      	bne.n	80027c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002770:	3b01      	subs	r3, #1
 8002772:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002774:	429a      	cmp	r2, r3
 8002776:	d123      	bne.n	80027c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002782:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002784:	429a      	cmp	r2, r3
 8002786:	d11b      	bne.n	80027c0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002792:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002794:	429a      	cmp	r2, r3
 8002796:	d113      	bne.n	80027c0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027a2:	085b      	lsrs	r3, r3, #1
 80027a4:	3b01      	subs	r3, #1
 80027a6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d109      	bne.n	80027c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b6:	085b      	lsrs	r3, r3, #1
 80027b8:	3b01      	subs	r3, #1
 80027ba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027bc:	429a      	cmp	r2, r3
 80027be:	d06b      	beq.n	8002898 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	2b0c      	cmp	r3, #12
 80027c4:	d062      	beq.n	800288c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027c6:	4b32      	ldr	r3, [pc, #200]	@ (8002890 <HAL_RCC_OscConfig+0x778>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e0ac      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027d6:	4b2e      	ldr	r3, [pc, #184]	@ (8002890 <HAL_RCC_OscConfig+0x778>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a2d      	ldr	r2, [pc, #180]	@ (8002890 <HAL_RCC_OscConfig+0x778>)
 80027dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027e0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027e2:	f7fe f8c3 	bl	800096c <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ea:	f7fe f8bf 	bl	800096c <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e099      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027fc:	4b24      	ldr	r3, [pc, #144]	@ (8002890 <HAL_RCC_OscConfig+0x778>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1f0      	bne.n	80027ea <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002808:	4b21      	ldr	r3, [pc, #132]	@ (8002890 <HAL_RCC_OscConfig+0x778>)
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	4b21      	ldr	r3, [pc, #132]	@ (8002894 <HAL_RCC_OscConfig+0x77c>)
 800280e:	4013      	ands	r3, r2
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002818:	3a01      	subs	r2, #1
 800281a:	0112      	lsls	r2, r2, #4
 800281c:	4311      	orrs	r1, r2
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002822:	0212      	lsls	r2, r2, #8
 8002824:	4311      	orrs	r1, r2
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800282a:	0852      	lsrs	r2, r2, #1
 800282c:	3a01      	subs	r2, #1
 800282e:	0552      	lsls	r2, r2, #21
 8002830:	4311      	orrs	r1, r2
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002836:	0852      	lsrs	r2, r2, #1
 8002838:	3a01      	subs	r2, #1
 800283a:	0652      	lsls	r2, r2, #25
 800283c:	4311      	orrs	r1, r2
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002842:	06d2      	lsls	r2, r2, #27
 8002844:	430a      	orrs	r2, r1
 8002846:	4912      	ldr	r1, [pc, #72]	@ (8002890 <HAL_RCC_OscConfig+0x778>)
 8002848:	4313      	orrs	r3, r2
 800284a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800284c:	4b10      	ldr	r3, [pc, #64]	@ (8002890 <HAL_RCC_OscConfig+0x778>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a0f      	ldr	r2, [pc, #60]	@ (8002890 <HAL_RCC_OscConfig+0x778>)
 8002852:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002856:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002858:	4b0d      	ldr	r3, [pc, #52]	@ (8002890 <HAL_RCC_OscConfig+0x778>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	4a0c      	ldr	r2, [pc, #48]	@ (8002890 <HAL_RCC_OscConfig+0x778>)
 800285e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002862:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002864:	f7fe f882 	bl	800096c <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286c:	f7fe f87e 	bl	800096c <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e058      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800287e:	4b04      	ldr	r3, [pc, #16]	@ (8002890 <HAL_RCC_OscConfig+0x778>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f0      	beq.n	800286c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800288a:	e050      	b.n	800292e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e04f      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
 8002890:	40021000 	.word	0x40021000
 8002894:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002898:	4b27      	ldr	r3, [pc, #156]	@ (8002938 <HAL_RCC_OscConfig+0x820>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d144      	bne.n	800292e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028a4:	4b24      	ldr	r3, [pc, #144]	@ (8002938 <HAL_RCC_OscConfig+0x820>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a23      	ldr	r2, [pc, #140]	@ (8002938 <HAL_RCC_OscConfig+0x820>)
 80028aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028b0:	4b21      	ldr	r3, [pc, #132]	@ (8002938 <HAL_RCC_OscConfig+0x820>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	4a20      	ldr	r2, [pc, #128]	@ (8002938 <HAL_RCC_OscConfig+0x820>)
 80028b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028bc:	f7fe f856 	bl	800096c <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c4:	f7fe f852 	bl	800096c <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e02c      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028d6:	4b18      	ldr	r3, [pc, #96]	@ (8002938 <HAL_RCC_OscConfig+0x820>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0f0      	beq.n	80028c4 <HAL_RCC_OscConfig+0x7ac>
 80028e2:	e024      	b.n	800292e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	2b0c      	cmp	r3, #12
 80028e8:	d01f      	beq.n	800292a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ea:	4b13      	ldr	r3, [pc, #76]	@ (8002938 <HAL_RCC_OscConfig+0x820>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a12      	ldr	r2, [pc, #72]	@ (8002938 <HAL_RCC_OscConfig+0x820>)
 80028f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f6:	f7fe f839 	bl	800096c <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028fe:	f7fe f835 	bl	800096c <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e00f      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002910:	4b09      	ldr	r3, [pc, #36]	@ (8002938 <HAL_RCC_OscConfig+0x820>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1f0      	bne.n	80028fe <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800291c:	4b06      	ldr	r3, [pc, #24]	@ (8002938 <HAL_RCC_OscConfig+0x820>)
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	4905      	ldr	r1, [pc, #20]	@ (8002938 <HAL_RCC_OscConfig+0x820>)
 8002922:	4b06      	ldr	r3, [pc, #24]	@ (800293c <HAL_RCC_OscConfig+0x824>)
 8002924:	4013      	ands	r3, r2
 8002926:	60cb      	str	r3, [r1, #12]
 8002928:	e001      	b.n	800292e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3720      	adds	r7, #32
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40021000 	.word	0x40021000
 800293c:	feeefffc 	.word	0xfeeefffc

08002940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e0e7      	b.n	8002b24 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002954:	4b75      	ldr	r3, [pc, #468]	@ (8002b2c <HAL_RCC_ClockConfig+0x1ec>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d910      	bls.n	8002984 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002962:	4b72      	ldr	r3, [pc, #456]	@ (8002b2c <HAL_RCC_ClockConfig+0x1ec>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f023 0207 	bic.w	r2, r3, #7
 800296a:	4970      	ldr	r1, [pc, #448]	@ (8002b2c <HAL_RCC_ClockConfig+0x1ec>)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	4313      	orrs	r3, r2
 8002970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002972:	4b6e      	ldr	r3, [pc, #440]	@ (8002b2c <HAL_RCC_ClockConfig+0x1ec>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d001      	beq.n	8002984 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e0cf      	b.n	8002b24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d010      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	4b66      	ldr	r3, [pc, #408]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800299c:	429a      	cmp	r2, r3
 800299e:	d908      	bls.n	80029b2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a0:	4b63      	ldr	r3, [pc, #396]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	4960      	ldr	r1, [pc, #384]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d04c      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	d107      	bne.n	80029d6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029c6:	4b5a      	ldr	r3, [pc, #360]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d121      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e0a6      	b.n	8002b24 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d107      	bne.n	80029ee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029de:	4b54      	ldr	r3, [pc, #336]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d115      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e09a      	b.n	8002b24 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d107      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029f6:	4b4e      	ldr	r3, [pc, #312]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d109      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e08e      	b.n	8002b24 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a06:	4b4a      	ldr	r3, [pc, #296]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e086      	b.n	8002b24 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a16:	4b46      	ldr	r3, [pc, #280]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f023 0203 	bic.w	r2, r3, #3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	4943      	ldr	r1, [pc, #268]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a28:	f7fd ffa0 	bl	800096c <HAL_GetTick>
 8002a2c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2e:	e00a      	b.n	8002a46 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a30:	f7fd ff9c 	bl	800096c <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e06e      	b.n	8002b24 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a46:	4b3a      	ldr	r3, [pc, #232]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 020c 	and.w	r2, r3, #12
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d1eb      	bne.n	8002a30 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d010      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	4b31      	ldr	r3, [pc, #196]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d208      	bcs.n	8002a86 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a74:	4b2e      	ldr	r3, [pc, #184]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	492b      	ldr	r1, [pc, #172]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a86:	4b29      	ldr	r3, [pc, #164]	@ (8002b2c <HAL_RCC_ClockConfig+0x1ec>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d210      	bcs.n	8002ab6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a94:	4b25      	ldr	r3, [pc, #148]	@ (8002b2c <HAL_RCC_ClockConfig+0x1ec>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f023 0207 	bic.w	r2, r3, #7
 8002a9c:	4923      	ldr	r1, [pc, #140]	@ (8002b2c <HAL_RCC_ClockConfig+0x1ec>)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa4:	4b21      	ldr	r3, [pc, #132]	@ (8002b2c <HAL_RCC_ClockConfig+0x1ec>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d001      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e036      	b.n	8002b24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d008      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	4918      	ldr	r1, [pc, #96]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d009      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ae0:	4b13      	ldr	r3, [pc, #76]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	4910      	ldr	r1, [pc, #64]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002af4:	f000 f824 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 8002af8:	4602      	mov	r2, r0
 8002afa:	4b0d      	ldr	r3, [pc, #52]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	091b      	lsrs	r3, r3, #4
 8002b00:	f003 030f 	and.w	r3, r3, #15
 8002b04:	490b      	ldr	r1, [pc, #44]	@ (8002b34 <HAL_RCC_ClockConfig+0x1f4>)
 8002b06:	5ccb      	ldrb	r3, [r1, r3]
 8002b08:	f003 031f 	and.w	r3, r3, #31
 8002b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b10:	4a09      	ldr	r2, [pc, #36]	@ (8002b38 <HAL_RCC_ClockConfig+0x1f8>)
 8002b12:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b14:	4b09      	ldr	r3, [pc, #36]	@ (8002b3c <HAL_RCC_ClockConfig+0x1fc>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7fd fed7 	bl	80008cc <HAL_InitTick>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b22:	7afb      	ldrb	r3, [r7, #11]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40022000 	.word	0x40022000
 8002b30:	40021000 	.word	0x40021000
 8002b34:	08002d88 	.word	0x08002d88
 8002b38:	20000000 	.word	0x20000000
 8002b3c:	20000004 	.word	0x20000004

08002b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b089      	sub	sp, #36	@ 0x24
 8002b44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	61fb      	str	r3, [r7, #28]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b4e:	4b3e      	ldr	r3, [pc, #248]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b58:	4b3b      	ldr	r3, [pc, #236]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d005      	beq.n	8002b74 <HAL_RCC_GetSysClockFreq+0x34>
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	2b0c      	cmp	r3, #12
 8002b6c:	d121      	bne.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d11e      	bne.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b74:	4b34      	ldr	r3, [pc, #208]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d107      	bne.n	8002b90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b80:	4b31      	ldr	r3, [pc, #196]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b86:	0a1b      	lsrs	r3, r3, #8
 8002b88:	f003 030f 	and.w	r3, r3, #15
 8002b8c:	61fb      	str	r3, [r7, #28]
 8002b8e:	e005      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b90:	4b2d      	ldr	r3, [pc, #180]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	091b      	lsrs	r3, r3, #4
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b9c:	4a2b      	ldr	r2, [pc, #172]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10d      	bne.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bb0:	e00a      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d102      	bne.n	8002bbe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bb8:	4b25      	ldr	r3, [pc, #148]	@ (8002c50 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bba:	61bb      	str	r3, [r7, #24]
 8002bbc:	e004      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d101      	bne.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002bc4:	4b23      	ldr	r3, [pc, #140]	@ (8002c54 <HAL_RCC_GetSysClockFreq+0x114>)
 8002bc6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	2b0c      	cmp	r3, #12
 8002bcc:	d134      	bne.n	8002c38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bce:	4b1e      	ldr	r3, [pc, #120]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d003      	beq.n	8002be6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d003      	beq.n	8002bec <HAL_RCC_GetSysClockFreq+0xac>
 8002be4:	e005      	b.n	8002bf2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002be6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c50 <HAL_RCC_GetSysClockFreq+0x110>)
 8002be8:	617b      	str	r3, [r7, #20]
      break;
 8002bea:	e005      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002bec:	4b19      	ldr	r3, [pc, #100]	@ (8002c54 <HAL_RCC_GetSysClockFreq+0x114>)
 8002bee:	617b      	str	r3, [r7, #20]
      break;
 8002bf0:	e002      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	617b      	str	r3, [r7, #20]
      break;
 8002bf6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bf8:	4b13      	ldr	r3, [pc, #76]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	3301      	adds	r3, #1
 8002c04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c06:	4b10      	ldr	r3, [pc, #64]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	0a1b      	lsrs	r3, r3, #8
 8002c0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	fb03 f202 	mul.w	r2, r3, r2
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	0e5b      	lsrs	r3, r3, #25
 8002c24:	f003 0303 	and.w	r3, r3, #3
 8002c28:	3301      	adds	r3, #1
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c38:	69bb      	ldr	r3, [r7, #24]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3724      	adds	r7, #36	@ 0x24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	08002d98 	.word	0x08002d98
 8002c50:	00f42400 	.word	0x00f42400
 8002c54:	007a1200 	.word	0x007a1200

08002c58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c60:	2300      	movs	r3, #0
 8002c62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c64:	4b2a      	ldr	r3, [pc, #168]	@ (8002d10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c70:	f7ff f9ee 	bl	8002050 <HAL_PWREx_GetVoltageRange>
 8002c74:	6178      	str	r0, [r7, #20]
 8002c76:	e014      	b.n	8002ca2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c78:	4b25      	ldr	r3, [pc, #148]	@ (8002d10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c7c:	4a24      	ldr	r2, [pc, #144]	@ (8002d10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c82:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c84:	4b22      	ldr	r3, [pc, #136]	@ (8002d10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c90:	f7ff f9de 	bl	8002050 <HAL_PWREx_GetVoltageRange>
 8002c94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c96:	4b1e      	ldr	r3, [pc, #120]	@ (8002d10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c9a:	4a1d      	ldr	r2, [pc, #116]	@ (8002d10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ca0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ca8:	d10b      	bne.n	8002cc2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b80      	cmp	r3, #128	@ 0x80
 8002cae:	d919      	bls.n	8002ce4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2ba0      	cmp	r3, #160	@ 0xa0
 8002cb4:	d902      	bls.n	8002cbc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	613b      	str	r3, [r7, #16]
 8002cba:	e013      	b.n	8002ce4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	613b      	str	r3, [r7, #16]
 8002cc0:	e010      	b.n	8002ce4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b80      	cmp	r3, #128	@ 0x80
 8002cc6:	d902      	bls.n	8002cce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002cc8:	2303      	movs	r3, #3
 8002cca:	613b      	str	r3, [r7, #16]
 8002ccc:	e00a      	b.n	8002ce4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b80      	cmp	r3, #128	@ 0x80
 8002cd2:	d102      	bne.n	8002cda <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	e004      	b.n	8002ce4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b70      	cmp	r3, #112	@ 0x70
 8002cde:	d101      	bne.n	8002ce4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8002d14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f023 0207 	bic.w	r2, r3, #7
 8002cec:	4909      	ldr	r1, [pc, #36]	@ (8002d14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002cf4:	4b07      	ldr	r3, [pc, #28]	@ (8002d14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d001      	beq.n	8002d06 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40021000 	.word	0x40021000
 8002d14:	40022000 	.word	0x40022000

08002d18 <memset>:
 8002d18:	4402      	add	r2, r0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d100      	bne.n	8002d22 <memset+0xa>
 8002d20:	4770      	bx	lr
 8002d22:	f803 1b01 	strb.w	r1, [r3], #1
 8002d26:	e7f9      	b.n	8002d1c <memset+0x4>

08002d28 <__libc_init_array>:
 8002d28:	b570      	push	{r4, r5, r6, lr}
 8002d2a:	4d0d      	ldr	r5, [pc, #52]	@ (8002d60 <__libc_init_array+0x38>)
 8002d2c:	4c0d      	ldr	r4, [pc, #52]	@ (8002d64 <__libc_init_array+0x3c>)
 8002d2e:	1b64      	subs	r4, r4, r5
 8002d30:	10a4      	asrs	r4, r4, #2
 8002d32:	2600      	movs	r6, #0
 8002d34:	42a6      	cmp	r6, r4
 8002d36:	d109      	bne.n	8002d4c <__libc_init_array+0x24>
 8002d38:	4d0b      	ldr	r5, [pc, #44]	@ (8002d68 <__libc_init_array+0x40>)
 8002d3a:	4c0c      	ldr	r4, [pc, #48]	@ (8002d6c <__libc_init_array+0x44>)
 8002d3c:	f000 f818 	bl	8002d70 <_init>
 8002d40:	1b64      	subs	r4, r4, r5
 8002d42:	10a4      	asrs	r4, r4, #2
 8002d44:	2600      	movs	r6, #0
 8002d46:	42a6      	cmp	r6, r4
 8002d48:	d105      	bne.n	8002d56 <__libc_init_array+0x2e>
 8002d4a:	bd70      	pop	{r4, r5, r6, pc}
 8002d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d50:	4798      	blx	r3
 8002d52:	3601      	adds	r6, #1
 8002d54:	e7ee      	b.n	8002d34 <__libc_init_array+0xc>
 8002d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d5a:	4798      	blx	r3
 8002d5c:	3601      	adds	r6, #1
 8002d5e:	e7f2      	b.n	8002d46 <__libc_init_array+0x1e>
 8002d60:	08002dc8 	.word	0x08002dc8
 8002d64:	08002dc8 	.word	0x08002dc8
 8002d68:	08002dc8 	.word	0x08002dc8
 8002d6c:	08002dcc 	.word	0x08002dcc

08002d70 <_init>:
 8002d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d72:	bf00      	nop
 8002d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d76:	bc08      	pop	{r3}
 8002d78:	469e      	mov	lr, r3
 8002d7a:	4770      	bx	lr

08002d7c <_fini>:
 8002d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7e:	bf00      	nop
 8002d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d82:	bc08      	pop	{r3}
 8002d84:	469e      	mov	lr, r3
 8002d86:	4770      	bx	lr
