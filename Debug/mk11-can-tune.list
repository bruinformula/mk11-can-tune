
mk11-can-tune.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002670  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080027fc  080027fc  000037fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800283c  0800283c  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800283c  0800283c  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800283c  0800283c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800283c  0800283c  0000383c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002840  08002840  00003840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002844  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08002850  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08002850  000040b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007141  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018b4  00000000  00000000  0000b17d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000728  00000000  00000000  0000ca38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000535  00000000  00000000  0000d160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eec8  00000000  00000000  0000d695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000081a0  00000000  00000000  0002c55d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bbb78  00000000  00000000  000346fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f0275  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ab8  00000000  00000000  000f02b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000f1d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080027e4 	.word	0x080027e4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080027e4 	.word	0x080027e4

080001cc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80001d0:	4b18      	ldr	r3, [pc, #96]	@ (8000234 <MX_CAN1_Init+0x68>)
 80001d2:	4a19      	ldr	r2, [pc, #100]	@ (8000238 <MX_CAN1_Init+0x6c>)
 80001d4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 80001d6:	4b17      	ldr	r3, [pc, #92]	@ (8000234 <MX_CAN1_Init+0x68>)
 80001d8:	2201      	movs	r2, #1
 80001da:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 80001dc:	4b15      	ldr	r3, [pc, #84]	@ (8000234 <MX_CAN1_Init+0x68>)
 80001de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80001e2:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80001e4:	4b13      	ldr	r3, [pc, #76]	@ (8000234 <MX_CAN1_Init+0x68>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80001ea:	4b12      	ldr	r3, [pc, #72]	@ (8000234 <MX_CAN1_Init+0x68>)
 80001ec:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 80001f0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80001f2:	4b10      	ldr	r3, [pc, #64]	@ (8000234 <MX_CAN1_Init+0x68>)
 80001f4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80001f8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80001fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000234 <MX_CAN1_Init+0x68>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000200:	4b0c      	ldr	r3, [pc, #48]	@ (8000234 <MX_CAN1_Init+0x68>)
 8000202:	2200      	movs	r2, #0
 8000204:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000206:	4b0b      	ldr	r3, [pc, #44]	@ (8000234 <MX_CAN1_Init+0x68>)
 8000208:	2200      	movs	r2, #0
 800020a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800020c:	4b09      	ldr	r3, [pc, #36]	@ (8000234 <MX_CAN1_Init+0x68>)
 800020e:	2200      	movs	r2, #0
 8000210:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000212:	4b08      	ldr	r3, [pc, #32]	@ (8000234 <MX_CAN1_Init+0x68>)
 8000214:	2200      	movs	r2, #0
 8000216:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000218:	4b06      	ldr	r3, [pc, #24]	@ (8000234 <MX_CAN1_Init+0x68>)
 800021a:	2200      	movs	r2, #0
 800021c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800021e:	4805      	ldr	r0, [pc, #20]	@ (8000234 <MX_CAN1_Init+0x68>)
 8000220:	f000 fb84 	bl	800092c <HAL_CAN_Init>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800022a:	f000 f921 	bl	8000470 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	20000028 	.word	0x20000028
 8000238:	40006400 	.word	0x40006400

0800023c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b08a      	sub	sp, #40	@ 0x28
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000244:	f107 0314 	add.w	r3, r7, #20
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
 800024c:	605a      	str	r2, [r3, #4]
 800024e:	609a      	str	r2, [r3, #8]
 8000250:	60da      	str	r2, [r3, #12]
 8000252:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a25      	ldr	r2, [pc, #148]	@ (80002f0 <HAL_CAN_MspInit+0xb4>)
 800025a:	4293      	cmp	r3, r2
 800025c:	d143      	bne.n	80002e6 <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800025e:	4b25      	ldr	r3, [pc, #148]	@ (80002f4 <HAL_CAN_MspInit+0xb8>)
 8000260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000262:	4a24      	ldr	r2, [pc, #144]	@ (80002f4 <HAL_CAN_MspInit+0xb8>)
 8000264:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000268:	6593      	str	r3, [r2, #88]	@ 0x58
 800026a:	4b22      	ldr	r3, [pc, #136]	@ (80002f4 <HAL_CAN_MspInit+0xb8>)
 800026c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800026e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000272:	613b      	str	r3, [r7, #16]
 8000274:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000276:	4b1f      	ldr	r3, [pc, #124]	@ (80002f4 <HAL_CAN_MspInit+0xb8>)
 8000278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800027a:	4a1e      	ldr	r2, [pc, #120]	@ (80002f4 <HAL_CAN_MspInit+0xb8>)
 800027c:	f043 0301 	orr.w	r3, r3, #1
 8000280:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000282:	4b1c      	ldr	r3, [pc, #112]	@ (80002f4 <HAL_CAN_MspInit+0xb8>)
 8000284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000286:	f003 0301 	and.w	r3, r3, #1
 800028a:	60fb      	str	r3, [r7, #12]
 800028c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800028e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000294:	2302      	movs	r3, #2
 8000296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000298:	2301      	movs	r3, #1
 800029a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800029c:	2303      	movs	r3, #3
 800029e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80002a0:	2309      	movs	r3, #9
 80002a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002a4:	f107 0314 	add.w	r3, r7, #20
 80002a8:	4619      	mov	r1, r3
 80002aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002ae:	f001 fa9f 	bl	80017f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80002b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002b8:	2302      	movs	r3, #2
 80002ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002bc:	2300      	movs	r3, #0
 80002be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80002c0:	2303      	movs	r3, #3
 80002c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80002c4:	2309      	movs	r3, #9
 80002c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002c8:	f107 0314 	add.w	r3, r7, #20
 80002cc:	4619      	mov	r1, r3
 80002ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002d2:	f001 fa8d 	bl	80017f0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80002d6:	2200      	movs	r2, #0
 80002d8:	2100      	movs	r1, #0
 80002da:	2014      	movs	r0, #20
 80002dc:	f001 fa51 	bl	8001782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80002e0:	2014      	movs	r0, #20
 80002e2:	f001 fa6a 	bl	80017ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80002e6:	bf00      	nop
 80002e8:	3728      	adds	r7, #40	@ 0x28
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	40006400 	.word	0x40006400
 80002f4:	40021000 	.word	0x40021000

080002f8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fe:	4b09      	ldr	r3, [pc, #36]	@ (8000324 <MX_GPIO_Init+0x2c>)
 8000300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000302:	4a08      	ldr	r2, [pc, #32]	@ (8000324 <MX_GPIO_Init+0x2c>)
 8000304:	f043 0301 	orr.w	r3, r3, #1
 8000308:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800030a:	4b06      	ldr	r3, [pc, #24]	@ (8000324 <MX_GPIO_Init+0x2c>)
 800030c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800030e:	f003 0301 	and.w	r3, r3, #1
 8000312:	607b      	str	r3, [r7, #4]
 8000314:	687b      	ldr	r3, [r7, #4]

}
 8000316:	bf00      	nop
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	40021000 	.word	0x40021000

08000328 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &(can_context.RxHeader), can_context.RxData) != HAL_OK) {
 8000330:	4b0e      	ldr	r3, [pc, #56]	@ (800036c <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000332:	4a0f      	ldr	r2, [pc, #60]	@ (8000370 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000334:	2100      	movs	r1, #0
 8000336:	6878      	ldr	r0, [r7, #4]
 8000338:	f000 fdd1 	bl	8000ede <HAL_CAN_GetRxMessage>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d10f      	bne.n	8000362 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
		return;
	}

	if (can_context.RxHeader.StdId == PARAMETER_TUNE_ID &&
 8000342:	4b0c      	ldr	r3, [pc, #48]	@ (8000374 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000346:	f240 12cf 	movw	r2, #463	@ 0x1cf
 800034a:	4293      	cmp	r3, r2
 800034c:	d10a      	bne.n	8000364 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
		can_context.RxData[0] == MICROCONTROLLER_ID) {
 800034e:	4b09      	ldr	r3, [pc, #36]	@ (8000374 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000350:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
	if (can_context.RxHeader.StdId == PARAMETER_TUNE_ID &&
 8000354:	2be1      	cmp	r3, #225	@ 0xe1
 8000356:	d105      	bne.n	8000364 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
		parameterTuneRxHandler(&can_context, &params);
 8000358:	4907      	ldr	r1, [pc, #28]	@ (8000378 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 800035a:	4806      	ldr	r0, [pc, #24]	@ (8000374 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800035c:	f000 f99c 	bl	8000698 <parameterTuneRxHandler>
 8000360:	e000      	b.n	8000364 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
		return;
 8000362:	bf00      	nop
	} else {
		// TODO
	}
}
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	20000094 	.word	0x20000094
 8000370:	20000078 	.word	0x20000078
 8000374:	20000050 	.word	0x20000050
 8000378:	2000009c 	.word	0x2000009c

0800037c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b08a      	sub	sp, #40	@ 0x28
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000382:	f000 fa3a 	bl	80007fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000386:	f000 f82d 	bl	80003e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800038a:	f7ff ffb5 	bl	80002f8 <MX_GPIO_Init>
  MX_CAN1_Init();
 800038e:	f7ff ff1d 	bl	80001cc <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  CAN_FilterTypeDef sFilterConfig;

  sFilterConfig.FilterBank = 0;
 8000392:	2300      	movs	r3, #0
 8000394:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000396:	2300      	movs	r3, #0
 8000398:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800039a:	2301      	movs	r3, #1
 800039c:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 800039e:	2300      	movs	r3, #0
 80003a0:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80003a2:	2300      	movs	r3, #0
 80003a4:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80003a6:	2300      	movs	r3, #0
 80003a8:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80003aa:	2300      	movs	r3, #0
 80003ac:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80003ae:	2300      	movs	r3, #0
 80003b0:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80003b2:	2301      	movs	r3, #1
 80003b4:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80003b6:	230e      	movs	r3, #14
 80003b8:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80003ba:	463b      	mov	r3, r7
 80003bc:	4619      	mov	r1, r3
 80003be:	4807      	ldr	r0, [pc, #28]	@ (80003dc <main+0x60>)
 80003c0:	f000 fbaf 	bl	8000b22 <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan1);
 80003c4:	4805      	ldr	r0, [pc, #20]	@ (80003dc <main+0x60>)
 80003c6:	f000 fc76 	bl	8000cb6 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80003ca:	2102      	movs	r1, #2
 80003cc:	4803      	ldr	r0, [pc, #12]	@ (80003dc <main+0x60>)
 80003ce:	f000 fea8 	bl	8001122 <HAL_CAN_ActivateNotification>

  sendParameterTune_dummy(&can_context);
 80003d2:	4803      	ldr	r0, [pc, #12]	@ (80003e0 <main+0x64>)
 80003d4:	f000 f8e4 	bl	80005a0 <sendParameterTune_dummy>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003d8:	bf00      	nop
 80003da:	e7fd      	b.n	80003d8 <main+0x5c>
 80003dc:	20000028 	.word	0x20000028
 80003e0:	20000050 	.word	0x20000050

080003e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b096      	sub	sp, #88	@ 0x58
 80003e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ea:	f107 0314 	add.w	r3, r7, #20
 80003ee:	2244      	movs	r2, #68	@ 0x44
 80003f0:	2100      	movs	r1, #0
 80003f2:	4618      	mov	r0, r3
 80003f4:	f002 f9ca 	bl	800278c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f8:	463b      	mov	r3, r7
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]
 8000404:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000406:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800040a:	f001 fb69 	bl	8001ae0 <HAL_PWREx_ControlVoltageScaling>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000414:	f000 f82c 	bl	8000470 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000418:	2310      	movs	r3, #16
 800041a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800041c:	2301      	movs	r3, #1
 800041e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000420:	2300      	movs	r3, #0
 8000422:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8000424:	2370      	movs	r3, #112	@ 0x70
 8000426:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000428:	2300      	movs	r3, #0
 800042a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042c:	f107 0314 	add.w	r3, r7, #20
 8000430:	4618      	mov	r0, r3
 8000432:	f001 fbab 	bl	8001b8c <HAL_RCC_OscConfig>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800043c:	f000 f818 	bl	8000470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000440:	230f      	movs	r3, #15
 8000442:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000444:	2300      	movs	r3, #0
 8000446:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000448:	2300      	movs	r3, #0
 800044a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800044c:	2300      	movs	r3, #0
 800044e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000450:	2300      	movs	r3, #0
 8000452:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000454:	463b      	mov	r3, r7
 8000456:	2100      	movs	r1, #0
 8000458:	4618      	mov	r0, r3
 800045a:	f001 ffab 	bl	80023b4 <HAL_RCC_ClockConfig>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000464:	f000 f804 	bl	8000470 <Error_Handler>
  }
}
 8000468:	bf00      	nop
 800046a:	3758      	adds	r7, #88	@ 0x58
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}

08000470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000474:	b672      	cpsid	i
}
 8000476:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000478:	bf00      	nop
 800047a:	e7fd      	b.n	8000478 <Error_Handler+0x8>

0800047c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000482:	4b0f      	ldr	r3, [pc, #60]	@ (80004c0 <HAL_MspInit+0x44>)
 8000484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000486:	4a0e      	ldr	r2, [pc, #56]	@ (80004c0 <HAL_MspInit+0x44>)
 8000488:	f043 0301 	orr.w	r3, r3, #1
 800048c:	6613      	str	r3, [r2, #96]	@ 0x60
 800048e:	4b0c      	ldr	r3, [pc, #48]	@ (80004c0 <HAL_MspInit+0x44>)
 8000490:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000492:	f003 0301 	and.w	r3, r3, #1
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800049a:	4b09      	ldr	r3, [pc, #36]	@ (80004c0 <HAL_MspInit+0x44>)
 800049c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800049e:	4a08      	ldr	r2, [pc, #32]	@ (80004c0 <HAL_MspInit+0x44>)
 80004a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80004a6:	4b06      	ldr	r3, [pc, #24]	@ (80004c0 <HAL_MspInit+0x44>)
 80004a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004ae:	603b      	str	r3, [r7, #0]
 80004b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004b2:	bf00      	nop
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	40021000 	.word	0x40021000

080004c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004c8:	bf00      	nop
 80004ca:	e7fd      	b.n	80004c8 <NMI_Handler+0x4>

080004cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d0:	bf00      	nop
 80004d2:	e7fd      	b.n	80004d0 <HardFault_Handler+0x4>

080004d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d8:	bf00      	nop
 80004da:	e7fd      	b.n	80004d8 <MemManage_Handler+0x4>

080004dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004e0:	bf00      	nop
 80004e2:	e7fd      	b.n	80004e0 <BusFault_Handler+0x4>

080004e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e8:	bf00      	nop
 80004ea:	e7fd      	b.n	80004e8 <UsageFault_Handler+0x4>

080004ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr

080004fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr

08000508 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000516:	b580      	push	{r7, lr}
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800051a:	f000 f9c3 	bl	80008a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000528:	4802      	ldr	r0, [pc, #8]	@ (8000534 <CAN1_RX0_IRQHandler+0x10>)
 800052a:	f000 fe20 	bl	800116e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20000028 	.word	0x20000028

08000538 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800053c:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <SystemInit+0x20>)
 800053e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000542:	4a05      	ldr	r2, [pc, #20]	@ (8000558 <SystemInit+0x20>)
 8000544:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000548:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	e000ed00 	.word	0xe000ed00

0800055c <bytes_to_float>:

#include "tuning.h"
#include "stm32l4xx_hal.h"
#include "string.h"

float bytes_to_float(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3) {
 800055c:	b490      	push	{r4, r7}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	4604      	mov	r4, r0
 8000564:	4608      	mov	r0, r1
 8000566:	4611      	mov	r1, r2
 8000568:	461a      	mov	r2, r3
 800056a:	4623      	mov	r3, r4
 800056c:	71fb      	strb	r3, [r7, #7]
 800056e:	4603      	mov	r3, r0
 8000570:	71bb      	strb	r3, [r7, #6]
 8000572:	460b      	mov	r3, r1
 8000574:	717b      	strb	r3, [r7, #5]
 8000576:	4613      	mov	r3, r2
 8000578:	713b      	strb	r3, [r7, #4]
	float f;
	char b[4] = {b3, b2, b1, b0};
 800057a:	793b      	ldrb	r3, [r7, #4]
 800057c:	723b      	strb	r3, [r7, #8]
 800057e:	797b      	ldrb	r3, [r7, #5]
 8000580:	727b      	strb	r3, [r7, #9]
 8000582:	79bb      	ldrb	r3, [r7, #6]
 8000584:	72bb      	strb	r3, [r7, #10]
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	72fb      	strb	r3, [r7, #11]
	memcpy(&f, &b, sizeof(f));
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	60fb      	str	r3, [r7, #12]
	return f;
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	ee07 3a90 	vmov	s15, r3
}
 8000594:	eeb0 0a67 	vmov.f32	s0, s15
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bc90      	pop	{r4, r7}
 800059e:	4770      	bx	lr

080005a0 <sendParameterTune_dummy>:

int parametersTuned = 0;
void sendParameterTune_dummy(CAN_CONTEXT* c) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	  c->TxHeader.IDE = CAN_ID_STD;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]
	  c->TxHeader.StdId = PARAMETER_TUNE_ID;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f240 12cf 	movw	r2, #463	@ 0x1cf
 80005b4:	609a      	str	r2, [r3, #8]
	  c->TxHeader.RTR = CAN_RTR_DATA;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2200      	movs	r2, #0
 80005ba:	615a      	str	r2, [r3, #20]
	  c->TxHeader.DLC = 7;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2207      	movs	r2, #7
 80005c0:	619a      	str	r2, [r3, #24]

	  c->TxData[0] = MICROCONTROLLER_ID;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	22e1      	movs	r2, #225	@ 0xe1
 80005c6:	f883 2020 	strb.w	r2, [r3, #32]
	  c->TxData[1] = PARAMETER_TUNE_DATA;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2204      	movs	r2, #4
 80005ce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	  // Some Random Values
	  c->TxData[3] = 0x42;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2242      	movs	r2, #66	@ 0x42
 80005d6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	  c->TxData[4] = 0x87;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2287      	movs	r2, #135	@ 0x87
 80005de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	  c->TxData[5] = 0xCC;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	22cc      	movs	r2, #204	@ 0xcc
 80005e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	  c->TxData[6] = 0xCD;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	22cd      	movs	r2, #205	@ 0xcd
 80005ee:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

	  c->TxData[2] = MIN_TORQUE_ID;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2201      	movs	r2, #1
 80005f6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	  HAL_CAN_AddTxMessage(&hcan1, &(c->TxHeader), c->TxData, &(c->TxMailbox));
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	f103 0108 	add.w	r1, r3, #8
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f103 0220 	add.w	r2, r3, #32
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	3304      	adds	r3, #4
 800060a:	4822      	ldr	r0, [pc, #136]	@ (8000694 <sendParameterTune_dummy+0xf4>)
 800060c:	f000 fb97 	bl	8000d3e <HAL_CAN_AddTxMessage>
	  HAL_Delay(1000);
 8000610:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000614:	f000 f966 	bl	80008e4 <HAL_Delay>

	  c->TxData[2] = MAX_TORQUE_ID;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2202      	movs	r2, #2
 800061c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	  HAL_CAN_AddTxMessage(&hcan1, &(c->TxHeader), c->TxData, &(c->TxMailbox));
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f103 0108 	add.w	r1, r3, #8
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f103 0220 	add.w	r2, r3, #32
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	3304      	adds	r3, #4
 8000630:	4818      	ldr	r0, [pc, #96]	@ (8000694 <sendParameterTune_dummy+0xf4>)
 8000632:	f000 fb84 	bl	8000d3e <HAL_CAN_AddTxMessage>
	  HAL_Delay(1000);
 8000636:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800063a:	f000 f953 	bl	80008e4 <HAL_Delay>

	  c->TxData[2] = REGEN_BASELINE_TORQUE_ID;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2203      	movs	r2, #3
 8000642:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	  HAL_CAN_AddTxMessage(&hcan1, &(c->TxHeader), c->TxData, &(c->TxMailbox));
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	f103 0108 	add.w	r1, r3, #8
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f103 0220 	add.w	r2, r3, #32
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	3304      	adds	r3, #4
 8000656:	480f      	ldr	r0, [pc, #60]	@ (8000694 <sendParameterTune_dummy+0xf4>)
 8000658:	f000 fb71 	bl	8000d3e <HAL_CAN_AddTxMessage>
	  HAL_Delay(1000);
 800065c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000660:	f000 f940 	bl	80008e4 <HAL_Delay>

	  c->TxData[2] = REGEN_MAX_TORQUE_ID;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2204      	movs	r2, #4
 8000668:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	  HAL_CAN_AddTxMessage(&hcan1, &(c->TxHeader), c->TxData, &(c->TxMailbox));
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f103 0108 	add.w	r1, r3, #8
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f103 0220 	add.w	r2, r3, #32
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	3304      	adds	r3, #4
 800067c:	4805      	ldr	r0, [pc, #20]	@ (8000694 <sendParameterTune_dummy+0xf4>)
 800067e:	f000 fb5e 	bl	8000d3e <HAL_CAN_AddTxMessage>
	  HAL_Delay(1000);
 8000682:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000686:	f000 f92d 	bl	80008e4 <HAL_Delay>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000028 	.word	0x20000028

08000698 <parameterTuneRxHandler>:

void parameterTuneRxHandler(CAN_CONTEXT* c, TUNABLE_PARAMETERS* params) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
	// TODO
	switch (c->RxData[1]) {
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d00c      	beq.n	80006c6 <parameterTuneRxHandler+0x2e>
 80006ac:	2b04      	cmp	r3, #4
 80006ae:	d000      	beq.n	80006b2 <parameterTuneRxHandler+0x1a>
	case PARAMETER_TUNE_DATA:
		parameterSetData(c, params);
		parametersTuned++;
		break;
	}
}
 80006b0:	e00a      	b.n	80006c8 <parameterTuneRxHandler+0x30>
		parameterSetData(c, params);
 80006b2:	6839      	ldr	r1, [r7, #0]
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f000 f80d 	bl	80006d4 <parameterSetData>
		parametersTuned++;
 80006ba:	4b05      	ldr	r3, [pc, #20]	@ (80006d0 <parameterTuneRxHandler+0x38>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	3301      	adds	r3, #1
 80006c0:	4a03      	ldr	r2, [pc, #12]	@ (80006d0 <parameterTuneRxHandler+0x38>)
 80006c2:	6013      	str	r3, [r2, #0]
		break;
 80006c4:	e000      	b.n	80006c8 <parameterTuneRxHandler+0x30>
		break;
 80006c6:	bf00      	nop
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	200000ac 	.word	0x200000ac

080006d4 <parameterSetData>:

void parameterSetData(CAN_CONTEXT* c, TUNABLE_PARAMETERS* params) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	6039      	str	r1, [r7, #0]
	// TODO: Abstract this slightly so the code isn't so repetitive
	switch (c->RxData[2]) {
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80006e4:	3b01      	subs	r3, #1
 80006e6:	2b03      	cmp	r3, #3
 80006e8:	d85a      	bhi.n	80007a0 <parameterSetData+0xcc>
 80006ea:	a201      	add	r2, pc, #4	@ (adr r2, 80006f0 <parameterSetData+0x1c>)
 80006ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f0:	08000701 	.word	0x08000701
 80006f4:	08000729 	.word	0x08000729
 80006f8:	08000751 	.word	0x08000751
 80006fc:	08000779 	.word	0x08000779
	case MIN_TORQUE_ID:
		params->MIN_TORQUE = bytes_to_float(c->RxData[3], c->RxData[4], c->RxData[5], c->RxData[6]);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f893 0047 	ldrb.w	r0, [r3, #71]	@ 0x47
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	f893 1048 	ldrb.w	r1, [r3, #72]	@ 0x48
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f893 2049 	ldrb.w	r2, [r3, #73]	@ 0x49
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8000718:	f7ff ff20 	bl	800055c <bytes_to_float>
 800071c:	eef0 7a40 	vmov.f32	s15, s0
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	edc3 7a00 	vstr	s15, [r3]
		break;
 8000726:	e03b      	b.n	80007a0 <parameterSetData+0xcc>
	case MAX_TORQUE_ID:
		params->MAX_TORQUE = bytes_to_float(c->RxData[3], c->RxData[4], c->RxData[5], c->RxData[6]);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f893 0047 	ldrb.w	r0, [r3, #71]	@ 0x47
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	f893 1048 	ldrb.w	r1, [r3, #72]	@ 0x48
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f893 2049 	ldrb.w	r2, [r3, #73]	@ 0x49
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8000740:	f7ff ff0c 	bl	800055c <bytes_to_float>
 8000744:	eef0 7a40 	vmov.f32	s15, s0
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 800074e:	e027      	b.n	80007a0 <parameterSetData+0xcc>
	case REGEN_BASELINE_TORQUE_ID:
		params->REGEN_BASELINE_TORQUE = bytes_to_float(c->RxData[3], c->RxData[4], c->RxData[5], c->RxData[6]);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f893 0047 	ldrb.w	r0, [r3, #71]	@ 0x47
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	f893 1048 	ldrb.w	r1, [r3, #72]	@ 0x48
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f893 2049 	ldrb.w	r2, [r3, #73]	@ 0x49
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8000768:	f7ff fef8 	bl	800055c <bytes_to_float>
 800076c:	eef0 7a40 	vmov.f32	s15, s0
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	edc3 7a02 	vstr	s15, [r3, #8]
		break;
 8000776:	e013      	b.n	80007a0 <parameterSetData+0xcc>
	case REGEN_MAX_TORQUE_ID:
		params->REGEN_MAX_TORQUE = bytes_to_float(c->RxData[3], c->RxData[4], c->RxData[5], c->RxData[6]);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f893 0047 	ldrb.w	r0, [r3, #71]	@ 0x47
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	f893 1048 	ldrb.w	r1, [r3, #72]	@ 0x48
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	f893 2049 	ldrb.w	r2, [r3, #73]	@ 0x49
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8000790:	f7ff fee4 	bl	800055c <bytes_to_float>
 8000794:	eef0 7a40 	vmov.f32	s15, s0
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	edc3 7a03 	vstr	s15, [r3, #12]
		break;
 800079e:	bf00      	nop
	}
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007ac:	f7ff fec4 	bl	8000538 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b0:	480c      	ldr	r0, [pc, #48]	@ (80007e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80007b2:	490d      	ldr	r1, [pc, #52]	@ (80007e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007b4:	4a0d      	ldr	r2, [pc, #52]	@ (80007ec <LoopForever+0xe>)
  movs r3, #0
 80007b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b8:	e002      	b.n	80007c0 <LoopCopyDataInit>

080007ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007be:	3304      	adds	r3, #4

080007c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c4:	d3f9      	bcc.n	80007ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007c6:	4a0a      	ldr	r2, [pc, #40]	@ (80007f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007c8:	4c0a      	ldr	r4, [pc, #40]	@ (80007f4 <LoopForever+0x16>)
  movs r3, #0
 80007ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007cc:	e001      	b.n	80007d2 <LoopFillZerobss>

080007ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d0:	3204      	adds	r2, #4

080007d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d4:	d3fb      	bcc.n	80007ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007d6:	f001 ffe1 	bl	800279c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007da:	f7ff fdcf 	bl	800037c <main>

080007de <LoopForever>:

LoopForever:
    b LoopForever
 80007de:	e7fe      	b.n	80007de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007e0:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80007e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007ec:	08002844 	.word	0x08002844
  ldr r2, =_sbss
 80007f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007f4:	200000b4 	.word	0x200000b4

080007f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007f8:	e7fe      	b.n	80007f8 <ADC1_IRQHandler>

080007fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000800:	2300      	movs	r3, #0
 8000802:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000804:	2003      	movs	r0, #3
 8000806:	f000 ffb1 	bl	800176c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800080a:	200f      	movs	r0, #15
 800080c:	f000 f80e 	bl	800082c <HAL_InitTick>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d002      	beq.n	800081c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000816:	2301      	movs	r3, #1
 8000818:	71fb      	strb	r3, [r7, #7]
 800081a:	e001      	b.n	8000820 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800081c:	f7ff fe2e 	bl	800047c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000820:	79fb      	ldrb	r3, [r7, #7]
}
 8000822:	4618      	mov	r0, r3
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000834:	2300      	movs	r3, #0
 8000836:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000838:	4b17      	ldr	r3, [pc, #92]	@ (8000898 <HAL_InitTick+0x6c>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d023      	beq.n	8000888 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000840:	4b16      	ldr	r3, [pc, #88]	@ (800089c <HAL_InitTick+0x70>)
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <HAL_InitTick+0x6c>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	4619      	mov	r1, r3
 800084a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800084e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000852:	fbb2 f3f3 	udiv	r3, r2, r3
 8000856:	4618      	mov	r0, r3
 8000858:	f000 ffbd 	bl	80017d6 <HAL_SYSTICK_Config>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d10f      	bne.n	8000882 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2b0f      	cmp	r3, #15
 8000866:	d809      	bhi.n	800087c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000868:	2200      	movs	r2, #0
 800086a:	6879      	ldr	r1, [r7, #4]
 800086c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000870:	f000 ff87 	bl	8001782 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000874:	4a0a      	ldr	r2, [pc, #40]	@ (80008a0 <HAL_InitTick+0x74>)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6013      	str	r3, [r2, #0]
 800087a:	e007      	b.n	800088c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800087c:	2301      	movs	r3, #1
 800087e:	73fb      	strb	r3, [r7, #15]
 8000880:	e004      	b.n	800088c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000882:	2301      	movs	r3, #1
 8000884:	73fb      	strb	r3, [r7, #15]
 8000886:	e001      	b.n	800088c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000888:	2301      	movs	r3, #1
 800088a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800088c:	7bfb      	ldrb	r3, [r7, #15]
}
 800088e:	4618      	mov	r0, r3
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000008 	.word	0x20000008
 800089c:	20000000 	.word	0x20000000
 80008a0:	20000004 	.word	0x20000004

080008a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008a8:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <HAL_IncTick+0x20>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	461a      	mov	r2, r3
 80008ae:	4b06      	ldr	r3, [pc, #24]	@ (80008c8 <HAL_IncTick+0x24>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4413      	add	r3, r2
 80008b4:	4a04      	ldr	r2, [pc, #16]	@ (80008c8 <HAL_IncTick+0x24>)
 80008b6:	6013      	str	r3, [r2, #0]
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	20000008 	.word	0x20000008
 80008c8:	200000b0 	.word	0x200000b0

080008cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  return uwTick;
 80008d0:	4b03      	ldr	r3, [pc, #12]	@ (80008e0 <HAL_GetTick+0x14>)
 80008d2:	681b      	ldr	r3, [r3, #0]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	200000b0 	.word	0x200000b0

080008e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008ec:	f7ff ffee 	bl	80008cc <HAL_GetTick>
 80008f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80008fc:	d005      	beq.n	800090a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80008fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000928 <HAL_Delay+0x44>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	461a      	mov	r2, r3
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	4413      	add	r3, r2
 8000908:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800090a:	bf00      	nop
 800090c:	f7ff ffde 	bl	80008cc <HAL_GetTick>
 8000910:	4602      	mov	r2, r0
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	68fa      	ldr	r2, [r7, #12]
 8000918:	429a      	cmp	r2, r3
 800091a:	d8f7      	bhi.n	800090c <HAL_Delay+0x28>
  {
  }
}
 800091c:	bf00      	nop
 800091e:	bf00      	nop
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000008 	.word	0x20000008

0800092c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d101      	bne.n	800093e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800093a:	2301      	movs	r3, #1
 800093c:	e0ed      	b.n	8000b1a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	2b00      	cmp	r3, #0
 8000948:	d102      	bne.n	8000950 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff fc76 	bl	800023c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f042 0201 	orr.w	r2, r2, #1
 800095e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000960:	f7ff ffb4 	bl	80008cc <HAL_GetTick>
 8000964:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000966:	e012      	b.n	800098e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000968:	f7ff ffb0 	bl	80008cc <HAL_GetTick>
 800096c:	4602      	mov	r2, r0
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	2b0a      	cmp	r3, #10
 8000974:	d90b      	bls.n	800098e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800097a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2205      	movs	r2, #5
 8000986:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
 800098c:	e0c5      	b.n	8000b1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	2b00      	cmp	r3, #0
 800099a:	d0e5      	beq.n	8000968 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f022 0202 	bic.w	r2, r2, #2
 80009aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009ac:	f7ff ff8e 	bl	80008cc <HAL_GetTick>
 80009b0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009b2:	e012      	b.n	80009da <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009b4:	f7ff ff8a 	bl	80008cc <HAL_GetTick>
 80009b8:	4602      	mov	r2, r0
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	2b0a      	cmp	r3, #10
 80009c0:	d90b      	bls.n	80009da <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009c6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2205      	movs	r2, #5
 80009d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
 80009d8:	e09f      	b.n	8000b1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d1e5      	bne.n	80009b4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	7e1b      	ldrb	r3, [r3, #24]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d108      	bne.n	8000a02 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	e007      	b.n	8000a12 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000a10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	7e5b      	ldrb	r3, [r3, #25]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d108      	bne.n	8000a2c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	e007      	b.n	8000a3c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000a3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	7e9b      	ldrb	r3, [r3, #26]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d108      	bne.n	8000a56 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f042 0220 	orr.w	r2, r2, #32
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	e007      	b.n	8000a66 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f022 0220 	bic.w	r2, r2, #32
 8000a64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	7edb      	ldrb	r3, [r3, #27]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d108      	bne.n	8000a80 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f022 0210 	bic.w	r2, r2, #16
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	e007      	b.n	8000a90 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f042 0210 	orr.w	r2, r2, #16
 8000a8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	7f1b      	ldrb	r3, [r3, #28]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d108      	bne.n	8000aaa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f042 0208 	orr.w	r2, r2, #8
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	e007      	b.n	8000aba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f022 0208 	bic.w	r2, r2, #8
 8000ab8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	7f5b      	ldrb	r3, [r3, #29]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d108      	bne.n	8000ad4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f042 0204 	orr.w	r2, r2, #4
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	e007      	b.n	8000ae4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f022 0204 	bic.w	r2, r2, #4
 8000ae2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	689a      	ldr	r2, [r3, #8]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	431a      	orrs	r2, r3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	691b      	ldr	r3, [r3, #16]
 8000af2:	431a      	orrs	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	695b      	ldr	r3, [r3, #20]
 8000af8:	ea42 0103 	orr.w	r1, r2, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	1e5a      	subs	r2, r3, #1
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	430a      	orrs	r2, r1
 8000b08:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2201      	movs	r2, #1
 8000b14:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000b22:	b480      	push	{r7}
 8000b24:	b087      	sub	sp, #28
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
 8000b2a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b38:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000b3a:	7cfb      	ldrb	r3, [r7, #19]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d003      	beq.n	8000b48 <HAL_CAN_ConfigFilter+0x26>
 8000b40:	7cfb      	ldrb	r3, [r7, #19]
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	f040 80aa 	bne.w	8000c9c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000b4e:	f043 0201 	orr.w	r2, r3, #1
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	695b      	ldr	r3, [r3, #20]
 8000b5c:	f003 031f 	and.w	r3, r3, #31
 8000b60:	2201      	movs	r2, #1
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	43db      	mvns	r3, r3
 8000b72:	401a      	ands	r2, r3
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	69db      	ldr	r3, [r3, #28]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d123      	bne.n	8000bca <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	401a      	ands	r2, r3
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ba0:	683a      	ldr	r2, [r7, #0]
 8000ba2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ba4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3248      	adds	r2, #72	@ 0x48
 8000baa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	689b      	ldr	r3, [r3, #8]
 8000bb2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bbe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bc0:	6979      	ldr	r1, [r7, #20]
 8000bc2:	3348      	adds	r3, #72	@ 0x48
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	440b      	add	r3, r1
 8000bc8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	69db      	ldr	r3, [r3, #28]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d122      	bne.n	8000c18 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	431a      	orrs	r2, r3
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bee:	683a      	ldr	r2, [r7, #0]
 8000bf0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000bf2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	3248      	adds	r2, #72	@ 0x48
 8000bf8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c0c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c0e:	6979      	ldr	r1, [r7, #20]
 8000c10:	3348      	adds	r3, #72	@ 0x48
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	440b      	add	r3, r1
 8000c16:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d109      	bne.n	8000c34 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	401a      	ands	r2, r3
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000c32:	e007      	b.n	8000c44 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	431a      	orrs	r2, r3
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	691b      	ldr	r3, [r3, #16]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d109      	bne.n	8000c60 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	43db      	mvns	r3, r3
 8000c56:	401a      	ands	r2, r3
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000c5e:	e007      	b.n	8000c70 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	431a      	orrs	r2, r3
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	6a1b      	ldr	r3, [r3, #32]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d107      	bne.n	8000c88 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	431a      	orrs	r2, r3
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000c8e:	f023 0201 	bic.w	r2, r3, #1
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	e006      	b.n	8000caa <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ca0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ca8:	2301      	movs	r3, #1
  }
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	371c      	adds	r7, #28
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b084      	sub	sp, #16
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d12e      	bne.n	8000d28 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2202      	movs	r2, #2
 8000cce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f022 0201 	bic.w	r2, r2, #1
 8000ce0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000ce2:	f7ff fdf3 	bl	80008cc <HAL_GetTick>
 8000ce6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ce8:	e012      	b.n	8000d10 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cea:	f7ff fdef 	bl	80008cc <HAL_GetTick>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	1ad3      	subs	r3, r2, r3
 8000cf4:	2b0a      	cmp	r3, #10
 8000cf6:	d90b      	bls.n	8000d10 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cfc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2205      	movs	r2, #5
 8000d08:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	e012      	b.n	8000d36 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d1e5      	bne.n	8000cea <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2200      	movs	r2, #0
 8000d22:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000d24:	2300      	movs	r3, #0
 8000d26:	e006      	b.n	8000d36 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d2c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
  }
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b089      	sub	sp, #36	@ 0x24
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	60f8      	str	r0, [r7, #12]
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	607a      	str	r2, [r7, #4]
 8000d4a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d52:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d5c:	7ffb      	ldrb	r3, [r7, #31]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d003      	beq.n	8000d6a <HAL_CAN_AddTxMessage+0x2c>
 8000d62:	7ffb      	ldrb	r3, [r7, #31]
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	f040 80ad 	bne.w	8000ec4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d10a      	bne.n	8000d8a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d105      	bne.n	8000d8a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	f000 8095 	beq.w	8000eb4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	0e1b      	lsrs	r3, r3, #24
 8000d8e:	f003 0303 	and.w	r3, r3, #3
 8000d92:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000d94:	2201      	movs	r2, #1
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	409a      	lsls	r2, r3
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d10d      	bne.n	8000dc2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000db0:	68f9      	ldr	r1, [r7, #12]
 8000db2:	6809      	ldr	r1, [r1, #0]
 8000db4:	431a      	orrs	r2, r3
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	3318      	adds	r3, #24
 8000dba:	011b      	lsls	r3, r3, #4
 8000dbc:	440b      	add	r3, r1
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	e00f      	b.n	8000de2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000dcc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000dd2:	68f9      	ldr	r1, [r7, #12]
 8000dd4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000dd6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	3318      	adds	r3, #24
 8000ddc:	011b      	lsls	r3, r3, #4
 8000dde:	440b      	add	r3, r1
 8000de0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	6819      	ldr	r1, [r3, #0]
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	691a      	ldr	r2, [r3, #16]
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	3318      	adds	r3, #24
 8000dee:	011b      	lsls	r3, r3, #4
 8000df0:	440b      	add	r3, r1
 8000df2:	3304      	adds	r3, #4
 8000df4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	7d1b      	ldrb	r3, [r3, #20]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d111      	bne.n	8000e22 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	3318      	adds	r3, #24
 8000e06:	011b      	lsls	r3, r3, #4
 8000e08:	4413      	add	r3, r2
 8000e0a:	3304      	adds	r3, #4
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	6811      	ldr	r1, [r2, #0]
 8000e12:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	3318      	adds	r3, #24
 8000e1a:	011b      	lsls	r3, r3, #4
 8000e1c:	440b      	add	r3, r1
 8000e1e:	3304      	adds	r3, #4
 8000e20:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	3307      	adds	r3, #7
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	061a      	lsls	r2, r3, #24
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3306      	adds	r3, #6
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	041b      	lsls	r3, r3, #16
 8000e32:	431a      	orrs	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3305      	adds	r3, #5
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	021b      	lsls	r3, r3, #8
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	3204      	adds	r2, #4
 8000e42:	7812      	ldrb	r2, [r2, #0]
 8000e44:	4610      	mov	r0, r2
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	6811      	ldr	r1, [r2, #0]
 8000e4a:	ea43 0200 	orr.w	r2, r3, r0
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	011b      	lsls	r3, r3, #4
 8000e52:	440b      	add	r3, r1
 8000e54:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000e58:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	3303      	adds	r3, #3
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	061a      	lsls	r2, r3, #24
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3302      	adds	r3, #2
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	041b      	lsls	r3, r3, #16
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	021b      	lsls	r3, r3, #8
 8000e74:	4313      	orrs	r3, r2
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	7812      	ldrb	r2, [r2, #0]
 8000e7a:	4610      	mov	r0, r2
 8000e7c:	68fa      	ldr	r2, [r7, #12]
 8000e7e:	6811      	ldr	r1, [r2, #0]
 8000e80:	ea43 0200 	orr.w	r2, r3, r0
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	440b      	add	r3, r1
 8000e8a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000e8e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	3318      	adds	r3, #24
 8000e98:	011b      	lsls	r3, r3, #4
 8000e9a:	4413      	add	r3, r2
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	6811      	ldr	r1, [r2, #0]
 8000ea2:	f043 0201 	orr.w	r2, r3, #1
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	3318      	adds	r3, #24
 8000eaa:	011b      	lsls	r3, r3, #4
 8000eac:	440b      	add	r3, r1
 8000eae:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	e00e      	b.n	8000ed2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eb8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e006      	b.n	8000ed2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ec8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
  }
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3724      	adds	r7, #36	@ 0x24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b087      	sub	sp, #28
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	60f8      	str	r0, [r7, #12]
 8000ee6:	60b9      	str	r1, [r7, #8]
 8000ee8:	607a      	str	r2, [r7, #4]
 8000eea:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ef2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ef4:	7dfb      	ldrb	r3, [r7, #23]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d003      	beq.n	8000f02 <HAL_CAN_GetRxMessage+0x24>
 8000efa:	7dfb      	ldrb	r3, [r7, #23]
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	f040 8103 	bne.w	8001108 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d10e      	bne.n	8000f26 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	f003 0303 	and.w	r3, r3, #3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d116      	bne.n	8000f44 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f1a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e0f7      	b.n	8001116 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	691b      	ldr	r3, [r3, #16]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d107      	bne.n	8000f44 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f38:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	e0e8      	b.n	8001116 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	331b      	adds	r3, #27
 8000f4c:	011b      	lsls	r3, r3, #4
 8000f4e:	4413      	add	r3, r2
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 0204 	and.w	r2, r3, #4
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d10c      	bne.n	8000f7c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	331b      	adds	r3, #27
 8000f6a:	011b      	lsls	r3, r3, #4
 8000f6c:	4413      	add	r3, r2
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	0d5b      	lsrs	r3, r3, #21
 8000f72:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	e00b      	b.n	8000f94 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	331b      	adds	r3, #27
 8000f84:	011b      	lsls	r3, r3, #4
 8000f86:	4413      	add	r3, r2
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	08db      	lsrs	r3, r3, #3
 8000f8c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	331b      	adds	r3, #27
 8000f9c:	011b      	lsls	r3, r3, #4
 8000f9e:	4413      	add	r3, r2
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0202 	and.w	r2, r3, #2
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	331b      	adds	r3, #27
 8000fb2:	011b      	lsls	r3, r3, #4
 8000fb4:	4413      	add	r3, r2
 8000fb6:	3304      	adds	r3, #4
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0308 	and.w	r3, r3, #8
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2208      	movs	r2, #8
 8000fc6:	611a      	str	r2, [r3, #16]
 8000fc8:	e00b      	b.n	8000fe2 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	331b      	adds	r3, #27
 8000fd2:	011b      	lsls	r3, r3, #4
 8000fd4:	4413      	add	r3, r2
 8000fd6:	3304      	adds	r3, #4
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 020f 	and.w	r2, r3, #15
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	331b      	adds	r3, #27
 8000fea:	011b      	lsls	r3, r3, #4
 8000fec:	4413      	add	r3, r2
 8000fee:	3304      	adds	r3, #4
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	0a1b      	lsrs	r3, r3, #8
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	331b      	adds	r3, #27
 8001002:	011b      	lsls	r3, r3, #4
 8001004:	4413      	add	r3, r2
 8001006:	3304      	adds	r3, #4
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	0c1b      	lsrs	r3, r3, #16
 800100c:	b29a      	uxth	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	011b      	lsls	r3, r3, #4
 800101a:	4413      	add	r3, r2
 800101c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	b2da      	uxtb	r2, r3
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	011b      	lsls	r3, r3, #4
 8001030:	4413      	add	r3, r2
 8001032:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	0a1a      	lsrs	r2, r3, #8
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	3301      	adds	r3, #1
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	011b      	lsls	r3, r3, #4
 800104a:	4413      	add	r3, r2
 800104c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	0c1a      	lsrs	r2, r3, #16
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	3302      	adds	r3, #2
 8001058:	b2d2      	uxtb	r2, r2
 800105a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	011b      	lsls	r3, r3, #4
 8001064:	4413      	add	r3, r2
 8001066:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	0e1a      	lsrs	r2, r3, #24
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	3303      	adds	r3, #3
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	011b      	lsls	r3, r3, #4
 800107e:	4413      	add	r3, r2
 8001080:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	3304      	adds	r3, #4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	011b      	lsls	r3, r3, #4
 8001096:	4413      	add	r3, r2
 8001098:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	0a1a      	lsrs	r2, r3, #8
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	3305      	adds	r3, #5
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	011b      	lsls	r3, r3, #4
 80010b0:	4413      	add	r3, r2
 80010b2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	0c1a      	lsrs	r2, r3, #16
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	3306      	adds	r3, #6
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	011b      	lsls	r3, r3, #4
 80010ca:	4413      	add	r3, r2
 80010cc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	0e1a      	lsrs	r2, r3, #24
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	3307      	adds	r3, #7
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d108      	bne.n	80010f4 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	68da      	ldr	r2, [r3, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f042 0220 	orr.w	r2, r2, #32
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	e007      	b.n	8001104 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	691a      	ldr	r2, [r3, #16]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f042 0220 	orr.w	r2, r2, #32
 8001102:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	e006      	b.n	8001116 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800110c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
  }
}
 8001116:	4618      	mov	r0, r3
 8001118:	371c      	adds	r7, #28
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001122:	b480      	push	{r7}
 8001124:	b085      	sub	sp, #20
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001132:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d002      	beq.n	8001140 <HAL_CAN_ActivateNotification+0x1e>
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	2b02      	cmp	r3, #2
 800113e:	d109      	bne.n	8001154 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6959      	ldr	r1, [r3, #20]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	683a      	ldr	r2, [r7, #0]
 800114c:	430a      	orrs	r2, r1
 800114e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001150:	2300      	movs	r3, #0
 8001152:	e006      	b.n	8001162 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001158:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
  }
}
 8001162:	4618      	mov	r0, r3
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b08a      	sub	sp, #40	@ 0x28
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001176:	2300      	movs	r3, #0
 8001178:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	695b      	ldr	r3, [r3, #20]
 8001180:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80011aa:	6a3b      	ldr	r3, [r7, #32]
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d07c      	beq.n	80012ae <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d023      	beq.n	8001206 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2201      	movs	r2, #1
 80011c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f000 f983 	bl	80014dc <HAL_CAN_TxMailbox0CompleteCallback>
 80011d6:	e016      	b.n	8001206 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	f003 0304 	and.w	r3, r3, #4
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d004      	beq.n	80011ec <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80011e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80011ea:	e00c      	b.n	8001206 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	f003 0308 	and.w	r3, r3, #8
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d004      	beq.n	8001200 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80011f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80011fe:	e002      	b.n	8001206 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 f989 	bl	8001518 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800120c:	2b00      	cmp	r3, #0
 800120e:	d024      	beq.n	800125a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001218:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f000 f963 	bl	80014f0 <HAL_CAN_TxMailbox1CompleteCallback>
 800122a:	e016      	b.n	800125a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001232:	2b00      	cmp	r3, #0
 8001234:	d004      	beq.n	8001240 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001238:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800123c:	627b      	str	r3, [r7, #36]	@ 0x24
 800123e:	e00c      	b.n	800125a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001246:	2b00      	cmp	r3, #0
 8001248:	d004      	beq.n	8001254 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800124a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001250:	627b      	str	r3, [r7, #36]	@ 0x24
 8001252:	e002      	b.n	800125a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 f969 	bl	800152c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d024      	beq.n	80012ae <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800126c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f000 f943 	bl	8001504 <HAL_CAN_TxMailbox2CompleteCallback>
 800127e:	e016      	b.n	80012ae <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d004      	beq.n	8001294 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800128a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001290:	627b      	str	r3, [r7, #36]	@ 0x24
 8001292:	e00c      	b.n	80012ae <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d004      	beq.n	80012a8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800129e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80012a6:	e002      	b.n	80012ae <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f000 f949 	bl	8001540 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80012ae:	6a3b      	ldr	r3, [r7, #32]
 80012b0:	f003 0308 	and.w	r3, r3, #8
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d00c      	beq.n	80012d2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	f003 0310 	and.w	r3, r3, #16
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d007      	beq.n	80012d2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80012c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012c8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2210      	movs	r2, #16
 80012d0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80012d2:	6a3b      	ldr	r3, [r7, #32]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00b      	beq.n	80012f4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d006      	beq.n	80012f4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2208      	movs	r2, #8
 80012ec:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 f930 	bl	8001554 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80012f4:	6a3b      	ldr	r3, [r7, #32]
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d009      	beq.n	8001312 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	f003 0303 	and.w	r3, r3, #3
 8001308:	2b00      	cmp	r3, #0
 800130a:	d002      	beq.n	8001312 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff f80b 	bl	8000328 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001312:	6a3b      	ldr	r3, [r7, #32]
 8001314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001318:	2b00      	cmp	r3, #0
 800131a:	d00c      	beq.n	8001336 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	f003 0310 	and.w	r3, r3, #16
 8001322:	2b00      	cmp	r3, #0
 8001324:	d007      	beq.n	8001336 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001328:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800132c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2210      	movs	r2, #16
 8001334:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001336:	6a3b      	ldr	r3, [r7, #32]
 8001338:	f003 0320 	and.w	r3, r3, #32
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00b      	beq.n	8001358 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	f003 0308 	and.w	r3, r3, #8
 8001346:	2b00      	cmp	r3, #0
 8001348:	d006      	beq.n	8001358 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2208      	movs	r2, #8
 8001350:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f000 f912 	bl	800157c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001358:	6a3b      	ldr	r3, [r7, #32]
 800135a:	f003 0310 	and.w	r3, r3, #16
 800135e:	2b00      	cmp	r3, #0
 8001360:	d009      	beq.n	8001376 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d002      	beq.n	8001376 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 f8f9 	bl	8001568 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d00b      	beq.n	8001398 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f003 0310 	and.w	r3, r3, #16
 8001386:	2b00      	cmp	r3, #0
 8001388:	d006      	beq.n	8001398 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2210      	movs	r2, #16
 8001390:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 f8fc 	bl	8001590 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001398:	6a3b      	ldr	r3, [r7, #32]
 800139a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d00b      	beq.n	80013ba <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d006      	beq.n	80013ba <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2208      	movs	r2, #8
 80013b2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f000 f8f5 	bl	80015a4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80013ba:	6a3b      	ldr	r3, [r7, #32]
 80013bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d07b      	beq.n	80014bc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f003 0304 	and.w	r3, r3, #4
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d072      	beq.n	80014b4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80013ce:	6a3b      	ldr	r3, [r7, #32]
 80013d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d008      	beq.n	80013ea <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80013e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013ea:	6a3b      	ldr	r3, [r7, #32]
 80013ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d008      	beq.n	8001406 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80013fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001406:	6a3b      	ldr	r3, [r7, #32]
 8001408:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800140c:	2b00      	cmp	r3, #0
 800140e:	d008      	beq.n	8001422 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800141a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141c:	f043 0304 	orr.w	r3, r3, #4
 8001420:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001422:	6a3b      	ldr	r3, [r7, #32]
 8001424:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001428:	2b00      	cmp	r3, #0
 800142a:	d043      	beq.n	80014b4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001432:	2b00      	cmp	r3, #0
 8001434:	d03e      	beq.n	80014b4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800143c:	2b60      	cmp	r3, #96	@ 0x60
 800143e:	d02b      	beq.n	8001498 <HAL_CAN_IRQHandler+0x32a>
 8001440:	2b60      	cmp	r3, #96	@ 0x60
 8001442:	d82e      	bhi.n	80014a2 <HAL_CAN_IRQHandler+0x334>
 8001444:	2b50      	cmp	r3, #80	@ 0x50
 8001446:	d022      	beq.n	800148e <HAL_CAN_IRQHandler+0x320>
 8001448:	2b50      	cmp	r3, #80	@ 0x50
 800144a:	d82a      	bhi.n	80014a2 <HAL_CAN_IRQHandler+0x334>
 800144c:	2b40      	cmp	r3, #64	@ 0x40
 800144e:	d019      	beq.n	8001484 <HAL_CAN_IRQHandler+0x316>
 8001450:	2b40      	cmp	r3, #64	@ 0x40
 8001452:	d826      	bhi.n	80014a2 <HAL_CAN_IRQHandler+0x334>
 8001454:	2b30      	cmp	r3, #48	@ 0x30
 8001456:	d010      	beq.n	800147a <HAL_CAN_IRQHandler+0x30c>
 8001458:	2b30      	cmp	r3, #48	@ 0x30
 800145a:	d822      	bhi.n	80014a2 <HAL_CAN_IRQHandler+0x334>
 800145c:	2b10      	cmp	r3, #16
 800145e:	d002      	beq.n	8001466 <HAL_CAN_IRQHandler+0x2f8>
 8001460:	2b20      	cmp	r3, #32
 8001462:	d005      	beq.n	8001470 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001464:	e01d      	b.n	80014a2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001468:	f043 0308 	orr.w	r3, r3, #8
 800146c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800146e:	e019      	b.n	80014a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001472:	f043 0310 	orr.w	r3, r3, #16
 8001476:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001478:	e014      	b.n	80014a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800147a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147c:	f043 0320 	orr.w	r3, r3, #32
 8001480:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001482:	e00f      	b.n	80014a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001486:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800148a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800148c:	e00a      	b.n	80014a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800148e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001490:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001494:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001496:	e005      	b.n	80014a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800149e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80014a0:	e000      	b.n	80014a4 <HAL_CAN_IRQHandler+0x336>
            break;
 80014a2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	699a      	ldr	r2, [r3, #24]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80014b2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2204      	movs	r2, #4
 80014ba:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80014bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d008      	beq.n	80014d4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c8:	431a      	orrs	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 f872 	bl	80015b8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80014d4:	bf00      	nop
 80014d6:	3728      	adds	r7, #40	@ 0x28
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015e8:	4013      	ands	r3, r2
 80015ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fe:	4a04      	ldr	r2, [pc, #16]	@ (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	60d3      	str	r3, [r2, #12]
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001618:	4b04      	ldr	r3, [pc, #16]	@ (800162c <__NVIC_GetPriorityGrouping+0x18>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	0a1b      	lsrs	r3, r3, #8
 800161e:	f003 0307 	and.w	r3, r3, #7
}
 8001622:	4618      	mov	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	2b00      	cmp	r3, #0
 8001640:	db0b      	blt.n	800165a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	f003 021f 	and.w	r2, r3, #31
 8001648:	4907      	ldr	r1, [pc, #28]	@ (8001668 <__NVIC_EnableIRQ+0x38>)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	095b      	lsrs	r3, r3, #5
 8001650:	2001      	movs	r0, #1
 8001652:	fa00 f202 	lsl.w	r2, r0, r2
 8001656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000e100 	.word	0xe000e100

0800166c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	6039      	str	r1, [r7, #0]
 8001676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167c:	2b00      	cmp	r3, #0
 800167e:	db0a      	blt.n	8001696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	b2da      	uxtb	r2, r3
 8001684:	490c      	ldr	r1, [pc, #48]	@ (80016b8 <__NVIC_SetPriority+0x4c>)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	0112      	lsls	r2, r2, #4
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	440b      	add	r3, r1
 8001690:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001694:	e00a      	b.n	80016ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4908      	ldr	r1, [pc, #32]	@ (80016bc <__NVIC_SetPriority+0x50>)
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	3b04      	subs	r3, #4
 80016a4:	0112      	lsls	r2, r2, #4
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	440b      	add	r3, r1
 80016aa:	761a      	strb	r2, [r3, #24]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000e100 	.word	0xe000e100
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b089      	sub	sp, #36	@ 0x24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f1c3 0307 	rsb	r3, r3, #7
 80016da:	2b04      	cmp	r3, #4
 80016dc:	bf28      	it	cs
 80016de:	2304      	movcs	r3, #4
 80016e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3304      	adds	r3, #4
 80016e6:	2b06      	cmp	r3, #6
 80016e8:	d902      	bls.n	80016f0 <NVIC_EncodePriority+0x30>
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3b03      	subs	r3, #3
 80016ee:	e000      	b.n	80016f2 <NVIC_EncodePriority+0x32>
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43da      	mvns	r2, r3
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	401a      	ands	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001708:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	fa01 f303 	lsl.w	r3, r1, r3
 8001712:	43d9      	mvns	r1, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	4313      	orrs	r3, r2
         );
}
 800171a:	4618      	mov	r0, r3
 800171c:	3724      	adds	r7, #36	@ 0x24
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3b01      	subs	r3, #1
 8001734:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001738:	d301      	bcc.n	800173e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800173a:	2301      	movs	r3, #1
 800173c:	e00f      	b.n	800175e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173e:	4a0a      	ldr	r2, [pc, #40]	@ (8001768 <SysTick_Config+0x40>)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3b01      	subs	r3, #1
 8001744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001746:	210f      	movs	r1, #15
 8001748:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800174c:	f7ff ff8e 	bl	800166c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001750:	4b05      	ldr	r3, [pc, #20]	@ (8001768 <SysTick_Config+0x40>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001756:	4b04      	ldr	r3, [pc, #16]	@ (8001768 <SysTick_Config+0x40>)
 8001758:	2207      	movs	r2, #7
 800175a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	e000e010 	.word	0xe000e010

0800176c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff ff29 	bl	80015cc <__NVIC_SetPriorityGrouping>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b086      	sub	sp, #24
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
 800178e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001794:	f7ff ff3e 	bl	8001614 <__NVIC_GetPriorityGrouping>
 8001798:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	68b9      	ldr	r1, [r7, #8]
 800179e:	6978      	ldr	r0, [r7, #20]
 80017a0:	f7ff ff8e 	bl	80016c0 <NVIC_EncodePriority>
 80017a4:	4602      	mov	r2, r0
 80017a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017aa:	4611      	mov	r1, r2
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff5d 	bl	800166c <__NVIC_SetPriority>
}
 80017b2:	bf00      	nop
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4603      	mov	r3, r0
 80017c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ff31 	bl	8001630 <__NVIC_EnableIRQ>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff ffa2 	bl	8001728 <SysTick_Config>
 80017e4:	4603      	mov	r3, r0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b087      	sub	sp, #28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017fe:	e148      	b.n	8001a92 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	2101      	movs	r1, #1
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	fa01 f303 	lsl.w	r3, r1, r3
 800180c:	4013      	ands	r3, r2
 800180e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 813a 	beq.w	8001a8c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	2b01      	cmp	r3, #1
 8001822:	d005      	beq.n	8001830 <HAL_GPIO_Init+0x40>
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 0303 	and.w	r3, r3, #3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d130      	bne.n	8001892 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	2203      	movs	r2, #3
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	68da      	ldr	r2, [r3, #12]
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001866:	2201      	movs	r2, #1
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4013      	ands	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	091b      	lsrs	r3, r3, #4
 800187c:	f003 0201 	and.w	r2, r3, #1
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	2b03      	cmp	r3, #3
 800189c:	d017      	beq.n	80018ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	2203      	movs	r2, #3
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4013      	ands	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d123      	bne.n	8001922 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	08da      	lsrs	r2, r3, #3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	3208      	adds	r2, #8
 80018e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	220f      	movs	r2, #15
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	691a      	ldr	r2, [r3, #16]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4313      	orrs	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	08da      	lsrs	r2, r3, #3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3208      	adds	r2, #8
 800191c:	6939      	ldr	r1, [r7, #16]
 800191e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	2203      	movs	r2, #3
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 0203 	and.w	r2, r3, #3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 8094 	beq.w	8001a8c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001964:	4b52      	ldr	r3, [pc, #328]	@ (8001ab0 <HAL_GPIO_Init+0x2c0>)
 8001966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001968:	4a51      	ldr	r2, [pc, #324]	@ (8001ab0 <HAL_GPIO_Init+0x2c0>)
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001970:	4b4f      	ldr	r3, [pc, #316]	@ (8001ab0 <HAL_GPIO_Init+0x2c0>)
 8001972:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800197c:	4a4d      	ldr	r2, [pc, #308]	@ (8001ab4 <HAL_GPIO_Init+0x2c4>)
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	089b      	lsrs	r3, r3, #2
 8001982:	3302      	adds	r3, #2
 8001984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001988:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	220f      	movs	r2, #15
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80019a6:	d00d      	beq.n	80019c4 <HAL_GPIO_Init+0x1d4>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a43      	ldr	r2, [pc, #268]	@ (8001ab8 <HAL_GPIO_Init+0x2c8>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d007      	beq.n	80019c0 <HAL_GPIO_Init+0x1d0>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a42      	ldr	r2, [pc, #264]	@ (8001abc <HAL_GPIO_Init+0x2cc>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d101      	bne.n	80019bc <HAL_GPIO_Init+0x1cc>
 80019b8:	2302      	movs	r3, #2
 80019ba:	e004      	b.n	80019c6 <HAL_GPIO_Init+0x1d6>
 80019bc:	2307      	movs	r3, #7
 80019be:	e002      	b.n	80019c6 <HAL_GPIO_Init+0x1d6>
 80019c0:	2301      	movs	r3, #1
 80019c2:	e000      	b.n	80019c6 <HAL_GPIO_Init+0x1d6>
 80019c4:	2300      	movs	r3, #0
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	f002 0203 	and.w	r2, r2, #3
 80019cc:	0092      	lsls	r2, r2, #2
 80019ce:	4093      	lsls	r3, r2
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019d6:	4937      	ldr	r1, [pc, #220]	@ (8001ab4 <HAL_GPIO_Init+0x2c4>)
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	089b      	lsrs	r3, r3, #2
 80019dc:	3302      	adds	r3, #2
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019e4:	4b36      	ldr	r3, [pc, #216]	@ (8001ac0 <HAL_GPIO_Init+0x2d0>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4013      	ands	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a08:	4a2d      	ldr	r2, [pc, #180]	@ (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a0e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	43db      	mvns	r3, r3
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a32:	4a23      	ldr	r2, [pc, #140]	@ (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a38:	4b21      	ldr	r3, [pc, #132]	@ (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a5c:	4a18      	ldr	r2, [pc, #96]	@ (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a62:	4b17      	ldr	r3, [pc, #92]	@ (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a86:	4a0e      	ldr	r2, [pc, #56]	@ (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f47f aeaf 	bne.w	8001800 <HAL_GPIO_Init+0x10>
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	bf00      	nop
 8001aa6:	371c      	adds	r7, #28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40010000 	.word	0x40010000
 8001ab8:	48000400 	.word	0x48000400
 8001abc:	48000800 	.word	0x48000800
 8001ac0:	40010400 	.word	0x40010400

08001ac4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ac8:	4b04      	ldr	r3, [pc, #16]	@ (8001adc <HAL_PWREx_GetVoltageRange+0x18>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40007000 	.word	0x40007000

08001ae0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001aee:	d130      	bne.n	8001b52 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001af0:	4b23      	ldr	r3, [pc, #140]	@ (8001b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001af8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001afc:	d038      	beq.n	8001b70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001afe:	4b20      	ldr	r3, [pc, #128]	@ (8001b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b06:	4a1e      	ldr	r2, [pc, #120]	@ (8001b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b08:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001b84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2232      	movs	r2, #50	@ 0x32
 8001b14:	fb02 f303 	mul.w	r3, r2, r3
 8001b18:	4a1b      	ldr	r2, [pc, #108]	@ (8001b88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1e:	0c9b      	lsrs	r3, r3, #18
 8001b20:	3301      	adds	r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b24:	e002      	b.n	8001b2c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b2c:	4b14      	ldr	r3, [pc, #80]	@ (8001b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b38:	d102      	bne.n	8001b40 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1f2      	bne.n	8001b26 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b40:	4b0f      	ldr	r3, [pc, #60]	@ (8001b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b4c:	d110      	bne.n	8001b70 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e00f      	b.n	8001b72 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b52:	4b0b      	ldr	r3, [pc, #44]	@ (8001b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b5e:	d007      	beq.n	8001b70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b60:	4b07      	ldr	r3, [pc, #28]	@ (8001b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b68:	4a05      	ldr	r2, [pc, #20]	@ (8001b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40007000 	.word	0x40007000
 8001b84:	20000000 	.word	0x20000000
 8001b88:	431bde83 	.word	0x431bde83

08001b8c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d102      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	f000 bc02 	b.w	80023a4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ba0:	4b96      	ldr	r3, [pc, #600]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 030c 	and.w	r3, r3, #12
 8001ba8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001baa:	4b94      	ldr	r3, [pc, #592]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0310 	and.w	r3, r3, #16
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 80e4 	beq.w	8001d8a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d007      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x4c>
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	2b0c      	cmp	r3, #12
 8001bcc:	f040 808b 	bne.w	8001ce6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	f040 8087 	bne.w	8001ce6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bd8:	4b88      	ldr	r3, [pc, #544]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d005      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x64>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e3d9      	b.n	80023a4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a1a      	ldr	r2, [r3, #32]
 8001bf4:	4b81      	ldr	r3, [pc, #516]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d004      	beq.n	8001c0a <HAL_RCC_OscConfig+0x7e>
 8001c00:	4b7e      	ldr	r3, [pc, #504]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c08:	e005      	b.n	8001c16 <HAL_RCC_OscConfig+0x8a>
 8001c0a:	4b7c      	ldr	r3, [pc, #496]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c10:	091b      	lsrs	r3, r3, #4
 8001c12:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d223      	bcs.n	8001c62 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f000 fd54 	bl	80026cc <RCC_SetFlashLatencyFromMSIRange>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e3ba      	b.n	80023a4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c2e:	4b73      	ldr	r3, [pc, #460]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a72      	ldr	r2, [pc, #456]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001c34:	f043 0308 	orr.w	r3, r3, #8
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	4b70      	ldr	r3, [pc, #448]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	496d      	ldr	r1, [pc, #436]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c4c:	4b6b      	ldr	r3, [pc, #428]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	021b      	lsls	r3, r3, #8
 8001c5a:	4968      	ldr	r1, [pc, #416]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	604b      	str	r3, [r1, #4]
 8001c60:	e025      	b.n	8001cae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c62:	4b66      	ldr	r3, [pc, #408]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a65      	ldr	r2, [pc, #404]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001c68:	f043 0308 	orr.w	r3, r3, #8
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	4b63      	ldr	r3, [pc, #396]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	4960      	ldr	r1, [pc, #384]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c80:	4b5e      	ldr	r3, [pc, #376]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	021b      	lsls	r3, r3, #8
 8001c8e:	495b      	ldr	r1, [pc, #364]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d109      	bne.n	8001cae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 fd14 	bl	80026cc <RCC_SetFlashLatencyFromMSIRange>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e37a      	b.n	80023a4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cae:	f000 fc81 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	4b51      	ldr	r3, [pc, #324]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	091b      	lsrs	r3, r3, #4
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	4950      	ldr	r1, [pc, #320]	@ (8001e00 <HAL_RCC_OscConfig+0x274>)
 8001cc0:	5ccb      	ldrb	r3, [r1, r3]
 8001cc2:	f003 031f 	and.w	r3, r3, #31
 8001cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cca:	4a4e      	ldr	r2, [pc, #312]	@ (8001e04 <HAL_RCC_OscConfig+0x278>)
 8001ccc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001cce:	4b4e      	ldr	r3, [pc, #312]	@ (8001e08 <HAL_RCC_OscConfig+0x27c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fdaa 	bl	800082c <HAL_InitTick>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d052      	beq.n	8001d88 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
 8001ce4:	e35e      	b.n	80023a4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d032      	beq.n	8001d54 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cee:	4b43      	ldr	r3, [pc, #268]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a42      	ldr	r2, [pc, #264]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cfa:	f7fe fde7 	bl	80008cc <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d02:	f7fe fde3 	bl	80008cc <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e347      	b.n	80023a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d14:	4b39      	ldr	r3, [pc, #228]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0f0      	beq.n	8001d02 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d20:	4b36      	ldr	r3, [pc, #216]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a35      	ldr	r2, [pc, #212]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001d26:	f043 0308 	orr.w	r3, r3, #8
 8001d2a:	6013      	str	r3, [r2, #0]
 8001d2c:	4b33      	ldr	r3, [pc, #204]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	4930      	ldr	r1, [pc, #192]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d3e:	4b2f      	ldr	r3, [pc, #188]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	021b      	lsls	r3, r3, #8
 8001d4c:	492b      	ldr	r1, [pc, #172]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	604b      	str	r3, [r1, #4]
 8001d52:	e01a      	b.n	8001d8a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d54:	4b29      	ldr	r3, [pc, #164]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a28      	ldr	r2, [pc, #160]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001d5a:	f023 0301 	bic.w	r3, r3, #1
 8001d5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d60:	f7fe fdb4 	bl	80008cc <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d68:	f7fe fdb0 	bl	80008cc <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e314      	b.n	80023a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d7a:	4b20      	ldr	r3, [pc, #128]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f0      	bne.n	8001d68 <HAL_RCC_OscConfig+0x1dc>
 8001d86:	e000      	b.n	8001d8a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d073      	beq.n	8001e7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	2b08      	cmp	r3, #8
 8001d9a:	d005      	beq.n	8001da8 <HAL_RCC_OscConfig+0x21c>
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	2b0c      	cmp	r3, #12
 8001da0:	d10e      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	d10b      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da8:	4b14      	ldr	r3, [pc, #80]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d063      	beq.n	8001e7c <HAL_RCC_OscConfig+0x2f0>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d15f      	bne.n	8001e7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e2f1      	b.n	80023a4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dc8:	d106      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x24c>
 8001dca:	4b0c      	ldr	r3, [pc, #48]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a0b      	ldr	r2, [pc, #44]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001dd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	e025      	b.n	8001e24 <HAL_RCC_OscConfig+0x298>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001de0:	d114      	bne.n	8001e0c <HAL_RCC_OscConfig+0x280>
 8001de2:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a05      	ldr	r2, [pc, #20]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001de8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	4b03      	ldr	r3, [pc, #12]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a02      	ldr	r2, [pc, #8]	@ (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001df4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	e013      	b.n	8001e24 <HAL_RCC_OscConfig+0x298>
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	080027fc 	.word	0x080027fc
 8001e04:	20000000 	.word	0x20000000
 8001e08:	20000004 	.word	0x20000004
 8001e0c:	4ba0      	ldr	r3, [pc, #640]	@ (8002090 <HAL_RCC_OscConfig+0x504>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a9f      	ldr	r2, [pc, #636]	@ (8002090 <HAL_RCC_OscConfig+0x504>)
 8001e12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	4b9d      	ldr	r3, [pc, #628]	@ (8002090 <HAL_RCC_OscConfig+0x504>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a9c      	ldr	r2, [pc, #624]	@ (8002090 <HAL_RCC_OscConfig+0x504>)
 8001e1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d013      	beq.n	8001e54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2c:	f7fe fd4e 	bl	80008cc <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e34:	f7fe fd4a 	bl	80008cc <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b64      	cmp	r3, #100	@ 0x64
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e2ae      	b.n	80023a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e46:	4b92      	ldr	r3, [pc, #584]	@ (8002090 <HAL_RCC_OscConfig+0x504>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0x2a8>
 8001e52:	e014      	b.n	8001e7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e54:	f7fe fd3a 	bl	80008cc <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e5c:	f7fe fd36 	bl	80008cc <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b64      	cmp	r3, #100	@ 0x64
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e29a      	b.n	80023a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e6e:	4b88      	ldr	r3, [pc, #544]	@ (8002090 <HAL_RCC_OscConfig+0x504>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f0      	bne.n	8001e5c <HAL_RCC_OscConfig+0x2d0>
 8001e7a:	e000      	b.n	8001e7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d060      	beq.n	8001f4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d005      	beq.n	8001e9c <HAL_RCC_OscConfig+0x310>
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	2b0c      	cmp	r3, #12
 8001e94:	d119      	bne.n	8001eca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d116      	bne.n	8001eca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e9c:	4b7c      	ldr	r3, [pc, #496]	@ (8002090 <HAL_RCC_OscConfig+0x504>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d005      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x328>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e277      	b.n	80023a4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb4:	4b76      	ldr	r3, [pc, #472]	@ (8002090 <HAL_RCC_OscConfig+0x504>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	061b      	lsls	r3, r3, #24
 8001ec2:	4973      	ldr	r1, [pc, #460]	@ (8002090 <HAL_RCC_OscConfig+0x504>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ec8:	e040      	b.n	8001f4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d023      	beq.n	8001f1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ed2:	4b6f      	ldr	r3, [pc, #444]	@ (8002090 <HAL_RCC_OscConfig+0x504>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a6e      	ldr	r2, [pc, #440]	@ (8002090 <HAL_RCC_OscConfig+0x504>)
 8001ed8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ede:	f7fe fcf5 	bl	80008cc <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee6:	f7fe fcf1 	bl	80008cc <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e255      	b.n	80023a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ef8:	4b65      	ldr	r3, [pc, #404]	@ (8002090 <HAL_RCC_OscConfig+0x504>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f04:	4b62      	ldr	r3, [pc, #392]	@ (8002090 <HAL_RCC_OscConfig+0x504>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	061b      	lsls	r3, r3, #24
 8001f12:	495f      	ldr	r1, [pc, #380]	@ (8002090 <HAL_RCC_OscConfig+0x504>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	604b      	str	r3, [r1, #4]
 8001f18:	e018      	b.n	8001f4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f1a:	4b5d      	ldr	r3, [pc, #372]	@ (8002090 <HAL_RCC_OscConfig+0x504>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a5c      	ldr	r2, [pc, #368]	@ (8002090 <HAL_RCC_OscConfig+0x504>)
 8001f20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f26:	f7fe fcd1 	bl	80008cc <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f2e:	f7fe fccd 	bl	80008cc <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e231      	b.n	80023a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f40:	4b53      	ldr	r3, [pc, #332]	@ (8002090 <HAL_RCC_OscConfig+0x504>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1f0      	bne.n	8001f2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d03c      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d01c      	beq.n	8001f9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f60:	4b4b      	ldr	r3, [pc, #300]	@ (8002090 <HAL_RCC_OscConfig+0x504>)
 8001f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f66:	4a4a      	ldr	r2, [pc, #296]	@ (8002090 <HAL_RCC_OscConfig+0x504>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f70:	f7fe fcac 	bl	80008cc <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f78:	f7fe fca8 	bl	80008cc <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e20c      	b.n	80023a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f8a:	4b41      	ldr	r3, [pc, #260]	@ (8002090 <HAL_RCC_OscConfig+0x504>)
 8001f8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0ef      	beq.n	8001f78 <HAL_RCC_OscConfig+0x3ec>
 8001f98:	e01b      	b.n	8001fd2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f9a:	4b3d      	ldr	r3, [pc, #244]	@ (8002090 <HAL_RCC_OscConfig+0x504>)
 8001f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fa0:	4a3b      	ldr	r2, [pc, #236]	@ (8002090 <HAL_RCC_OscConfig+0x504>)
 8001fa2:	f023 0301 	bic.w	r3, r3, #1
 8001fa6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001faa:	f7fe fc8f 	bl	80008cc <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb2:	f7fe fc8b 	bl	80008cc <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e1ef      	b.n	80023a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fc4:	4b32      	ldr	r3, [pc, #200]	@ (8002090 <HAL_RCC_OscConfig+0x504>)
 8001fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1ef      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 80a6 	beq.w	800212c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fe4:	4b2a      	ldr	r3, [pc, #168]	@ (8002090 <HAL_RCC_OscConfig+0x504>)
 8001fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d10d      	bne.n	800200c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ff0:	4b27      	ldr	r3, [pc, #156]	@ (8002090 <HAL_RCC_OscConfig+0x504>)
 8001ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff4:	4a26      	ldr	r2, [pc, #152]	@ (8002090 <HAL_RCC_OscConfig+0x504>)
 8001ff6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ffa:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ffc:	4b24      	ldr	r3, [pc, #144]	@ (8002090 <HAL_RCC_OscConfig+0x504>)
 8001ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002000:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002008:	2301      	movs	r3, #1
 800200a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800200c:	4b21      	ldr	r3, [pc, #132]	@ (8002094 <HAL_RCC_OscConfig+0x508>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002014:	2b00      	cmp	r3, #0
 8002016:	d118      	bne.n	800204a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002018:	4b1e      	ldr	r3, [pc, #120]	@ (8002094 <HAL_RCC_OscConfig+0x508>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a1d      	ldr	r2, [pc, #116]	@ (8002094 <HAL_RCC_OscConfig+0x508>)
 800201e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002022:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002024:	f7fe fc52 	bl	80008cc <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800202c:	f7fe fc4e 	bl	80008cc <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e1b2      	b.n	80023a4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800203e:	4b15      	ldr	r3, [pc, #84]	@ (8002094 <HAL_RCC_OscConfig+0x508>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0f0      	beq.n	800202c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d108      	bne.n	8002064 <HAL_RCC_OscConfig+0x4d8>
 8002052:	4b0f      	ldr	r3, [pc, #60]	@ (8002090 <HAL_RCC_OscConfig+0x504>)
 8002054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002058:	4a0d      	ldr	r2, [pc, #52]	@ (8002090 <HAL_RCC_OscConfig+0x504>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002062:	e029      	b.n	80020b8 <HAL_RCC_OscConfig+0x52c>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	2b05      	cmp	r3, #5
 800206a:	d115      	bne.n	8002098 <HAL_RCC_OscConfig+0x50c>
 800206c:	4b08      	ldr	r3, [pc, #32]	@ (8002090 <HAL_RCC_OscConfig+0x504>)
 800206e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002072:	4a07      	ldr	r2, [pc, #28]	@ (8002090 <HAL_RCC_OscConfig+0x504>)
 8002074:	f043 0304 	orr.w	r3, r3, #4
 8002078:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800207c:	4b04      	ldr	r3, [pc, #16]	@ (8002090 <HAL_RCC_OscConfig+0x504>)
 800207e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002082:	4a03      	ldr	r2, [pc, #12]	@ (8002090 <HAL_RCC_OscConfig+0x504>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800208c:	e014      	b.n	80020b8 <HAL_RCC_OscConfig+0x52c>
 800208e:	bf00      	nop
 8002090:	40021000 	.word	0x40021000
 8002094:	40007000 	.word	0x40007000
 8002098:	4b9a      	ldr	r3, [pc, #616]	@ (8002304 <HAL_RCC_OscConfig+0x778>)
 800209a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800209e:	4a99      	ldr	r2, [pc, #612]	@ (8002304 <HAL_RCC_OscConfig+0x778>)
 80020a0:	f023 0301 	bic.w	r3, r3, #1
 80020a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020a8:	4b96      	ldr	r3, [pc, #600]	@ (8002304 <HAL_RCC_OscConfig+0x778>)
 80020aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ae:	4a95      	ldr	r2, [pc, #596]	@ (8002304 <HAL_RCC_OscConfig+0x778>)
 80020b0:	f023 0304 	bic.w	r3, r3, #4
 80020b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d016      	beq.n	80020ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c0:	f7fe fc04 	bl	80008cc <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c6:	e00a      	b.n	80020de <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c8:	f7fe fc00 	bl	80008cc <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e162      	b.n	80023a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020de:	4b89      	ldr	r3, [pc, #548]	@ (8002304 <HAL_RCC_OscConfig+0x778>)
 80020e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0ed      	beq.n	80020c8 <HAL_RCC_OscConfig+0x53c>
 80020ec:	e015      	b.n	800211a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ee:	f7fe fbed 	bl	80008cc <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020f4:	e00a      	b.n	800210c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020f6:	f7fe fbe9 	bl	80008cc <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002104:	4293      	cmp	r3, r2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e14b      	b.n	80023a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800210c:	4b7d      	ldr	r3, [pc, #500]	@ (8002304 <HAL_RCC_OscConfig+0x778>)
 800210e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1ed      	bne.n	80020f6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800211a:	7ffb      	ldrb	r3, [r7, #31]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d105      	bne.n	800212c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002120:	4b78      	ldr	r3, [pc, #480]	@ (8002304 <HAL_RCC_OscConfig+0x778>)
 8002122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002124:	4a77      	ldr	r2, [pc, #476]	@ (8002304 <HAL_RCC_OscConfig+0x778>)
 8002126:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800212a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0320 	and.w	r3, r3, #32
 8002134:	2b00      	cmp	r3, #0
 8002136:	d03c      	beq.n	80021b2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213c:	2b00      	cmp	r3, #0
 800213e:	d01c      	beq.n	800217a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002140:	4b70      	ldr	r3, [pc, #448]	@ (8002304 <HAL_RCC_OscConfig+0x778>)
 8002142:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002146:	4a6f      	ldr	r2, [pc, #444]	@ (8002304 <HAL_RCC_OscConfig+0x778>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002150:	f7fe fbbc 	bl	80008cc <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002158:	f7fe fbb8 	bl	80008cc <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e11c      	b.n	80023a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800216a:	4b66      	ldr	r3, [pc, #408]	@ (8002304 <HAL_RCC_OscConfig+0x778>)
 800216c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0ef      	beq.n	8002158 <HAL_RCC_OscConfig+0x5cc>
 8002178:	e01b      	b.n	80021b2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800217a:	4b62      	ldr	r3, [pc, #392]	@ (8002304 <HAL_RCC_OscConfig+0x778>)
 800217c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002180:	4a60      	ldr	r2, [pc, #384]	@ (8002304 <HAL_RCC_OscConfig+0x778>)
 8002182:	f023 0301 	bic.w	r3, r3, #1
 8002186:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218a:	f7fe fb9f 	bl	80008cc <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002192:	f7fe fb9b 	bl	80008cc <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e0ff      	b.n	80023a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021a4:	4b57      	ldr	r3, [pc, #348]	@ (8002304 <HAL_RCC_OscConfig+0x778>)
 80021a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1ef      	bne.n	8002192 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 80f3 	beq.w	80023a2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	f040 80c9 	bne.w	8002358 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021c6:	4b4f      	ldr	r3, [pc, #316]	@ (8002304 <HAL_RCC_OscConfig+0x778>)
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	f003 0203 	and.w	r2, r3, #3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d12c      	bne.n	8002234 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e4:	3b01      	subs	r3, #1
 80021e6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d123      	bne.n	8002234 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021f6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d11b      	bne.n	8002234 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002206:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002208:	429a      	cmp	r2, r3
 800220a:	d113      	bne.n	8002234 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002216:	085b      	lsrs	r3, r3, #1
 8002218:	3b01      	subs	r3, #1
 800221a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800221c:	429a      	cmp	r2, r3
 800221e:	d109      	bne.n	8002234 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222a:	085b      	lsrs	r3, r3, #1
 800222c:	3b01      	subs	r3, #1
 800222e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002230:	429a      	cmp	r2, r3
 8002232:	d06b      	beq.n	800230c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	2b0c      	cmp	r3, #12
 8002238:	d062      	beq.n	8002300 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800223a:	4b32      	ldr	r3, [pc, #200]	@ (8002304 <HAL_RCC_OscConfig+0x778>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e0ac      	b.n	80023a4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800224a:	4b2e      	ldr	r3, [pc, #184]	@ (8002304 <HAL_RCC_OscConfig+0x778>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a2d      	ldr	r2, [pc, #180]	@ (8002304 <HAL_RCC_OscConfig+0x778>)
 8002250:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002254:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002256:	f7fe fb39 	bl	80008cc <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225e:	f7fe fb35 	bl	80008cc <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e099      	b.n	80023a4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002270:	4b24      	ldr	r3, [pc, #144]	@ (8002304 <HAL_RCC_OscConfig+0x778>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1f0      	bne.n	800225e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800227c:	4b21      	ldr	r3, [pc, #132]	@ (8002304 <HAL_RCC_OscConfig+0x778>)
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	4b21      	ldr	r3, [pc, #132]	@ (8002308 <HAL_RCC_OscConfig+0x77c>)
 8002282:	4013      	ands	r3, r2
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800228c:	3a01      	subs	r2, #1
 800228e:	0112      	lsls	r2, r2, #4
 8002290:	4311      	orrs	r1, r2
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002296:	0212      	lsls	r2, r2, #8
 8002298:	4311      	orrs	r1, r2
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800229e:	0852      	lsrs	r2, r2, #1
 80022a0:	3a01      	subs	r2, #1
 80022a2:	0552      	lsls	r2, r2, #21
 80022a4:	4311      	orrs	r1, r2
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80022aa:	0852      	lsrs	r2, r2, #1
 80022ac:	3a01      	subs	r2, #1
 80022ae:	0652      	lsls	r2, r2, #25
 80022b0:	4311      	orrs	r1, r2
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80022b6:	06d2      	lsls	r2, r2, #27
 80022b8:	430a      	orrs	r2, r1
 80022ba:	4912      	ldr	r1, [pc, #72]	@ (8002304 <HAL_RCC_OscConfig+0x778>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022c0:	4b10      	ldr	r3, [pc, #64]	@ (8002304 <HAL_RCC_OscConfig+0x778>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a0f      	ldr	r2, [pc, #60]	@ (8002304 <HAL_RCC_OscConfig+0x778>)
 80022c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002304 <HAL_RCC_OscConfig+0x778>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	4a0c      	ldr	r2, [pc, #48]	@ (8002304 <HAL_RCC_OscConfig+0x778>)
 80022d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022d8:	f7fe faf8 	bl	80008cc <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e0:	f7fe faf4 	bl	80008cc <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e058      	b.n	80023a4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f2:	4b04      	ldr	r3, [pc, #16]	@ (8002304 <HAL_RCC_OscConfig+0x778>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0f0      	beq.n	80022e0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022fe:	e050      	b.n	80023a2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e04f      	b.n	80023a4 <HAL_RCC_OscConfig+0x818>
 8002304:	40021000 	.word	0x40021000
 8002308:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800230c:	4b27      	ldr	r3, [pc, #156]	@ (80023ac <HAL_RCC_OscConfig+0x820>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d144      	bne.n	80023a2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002318:	4b24      	ldr	r3, [pc, #144]	@ (80023ac <HAL_RCC_OscConfig+0x820>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a23      	ldr	r2, [pc, #140]	@ (80023ac <HAL_RCC_OscConfig+0x820>)
 800231e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002322:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002324:	4b21      	ldr	r3, [pc, #132]	@ (80023ac <HAL_RCC_OscConfig+0x820>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	4a20      	ldr	r2, [pc, #128]	@ (80023ac <HAL_RCC_OscConfig+0x820>)
 800232a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800232e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002330:	f7fe facc 	bl	80008cc <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002338:	f7fe fac8 	bl	80008cc <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e02c      	b.n	80023a4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800234a:	4b18      	ldr	r3, [pc, #96]	@ (80023ac <HAL_RCC_OscConfig+0x820>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f0      	beq.n	8002338 <HAL_RCC_OscConfig+0x7ac>
 8002356:	e024      	b.n	80023a2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	2b0c      	cmp	r3, #12
 800235c:	d01f      	beq.n	800239e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800235e:	4b13      	ldr	r3, [pc, #76]	@ (80023ac <HAL_RCC_OscConfig+0x820>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a12      	ldr	r2, [pc, #72]	@ (80023ac <HAL_RCC_OscConfig+0x820>)
 8002364:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002368:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236a:	f7fe faaf 	bl	80008cc <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002372:	f7fe faab 	bl	80008cc <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e00f      	b.n	80023a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002384:	4b09      	ldr	r3, [pc, #36]	@ (80023ac <HAL_RCC_OscConfig+0x820>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1f0      	bne.n	8002372 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002390:	4b06      	ldr	r3, [pc, #24]	@ (80023ac <HAL_RCC_OscConfig+0x820>)
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	4905      	ldr	r1, [pc, #20]	@ (80023ac <HAL_RCC_OscConfig+0x820>)
 8002396:	4b06      	ldr	r3, [pc, #24]	@ (80023b0 <HAL_RCC_OscConfig+0x824>)
 8002398:	4013      	ands	r3, r2
 800239a:	60cb      	str	r3, [r1, #12]
 800239c:	e001      	b.n	80023a2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3720      	adds	r7, #32
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40021000 	.word	0x40021000
 80023b0:	feeefffc 	.word	0xfeeefffc

080023b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0e7      	b.n	8002598 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023c8:	4b75      	ldr	r3, [pc, #468]	@ (80025a0 <HAL_RCC_ClockConfig+0x1ec>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d910      	bls.n	80023f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d6:	4b72      	ldr	r3, [pc, #456]	@ (80025a0 <HAL_RCC_ClockConfig+0x1ec>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f023 0207 	bic.w	r2, r3, #7
 80023de:	4970      	ldr	r1, [pc, #448]	@ (80025a0 <HAL_RCC_ClockConfig+0x1ec>)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e6:	4b6e      	ldr	r3, [pc, #440]	@ (80025a0 <HAL_RCC_ClockConfig+0x1ec>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d001      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0cf      	b.n	8002598 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d010      	beq.n	8002426 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	4b66      	ldr	r3, [pc, #408]	@ (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002410:	429a      	cmp	r2, r3
 8002412:	d908      	bls.n	8002426 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002414:	4b63      	ldr	r3, [pc, #396]	@ (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	4960      	ldr	r1, [pc, #384]	@ (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002422:	4313      	orrs	r3, r2
 8002424:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d04c      	beq.n	80024cc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b03      	cmp	r3, #3
 8002438:	d107      	bne.n	800244a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800243a:	4b5a      	ldr	r3, [pc, #360]	@ (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d121      	bne.n	800248a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e0a6      	b.n	8002598 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b02      	cmp	r3, #2
 8002450:	d107      	bne.n	8002462 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002452:	4b54      	ldr	r3, [pc, #336]	@ (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d115      	bne.n	800248a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e09a      	b.n	8002598 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d107      	bne.n	800247a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800246a:	4b4e      	ldr	r3, [pc, #312]	@ (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d109      	bne.n	800248a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e08e      	b.n	8002598 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800247a:	4b4a      	ldr	r3, [pc, #296]	@ (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e086      	b.n	8002598 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800248a:	4b46      	ldr	r3, [pc, #280]	@ (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f023 0203 	bic.w	r2, r3, #3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	4943      	ldr	r1, [pc, #268]	@ (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002498:	4313      	orrs	r3, r2
 800249a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800249c:	f7fe fa16 	bl	80008cc <HAL_GetTick>
 80024a0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a2:	e00a      	b.n	80024ba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a4:	f7fe fa12 	bl	80008cc <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e06e      	b.n	8002598 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ba:	4b3a      	ldr	r3, [pc, #232]	@ (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 020c 	and.w	r2, r3, #12
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d1eb      	bne.n	80024a4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d010      	beq.n	80024fa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	4b31      	ldr	r3, [pc, #196]	@ (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d208      	bcs.n	80024fa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e8:	4b2e      	ldr	r3, [pc, #184]	@ (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	492b      	ldr	r1, [pc, #172]	@ (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024fa:	4b29      	ldr	r3, [pc, #164]	@ (80025a0 <HAL_RCC_ClockConfig+0x1ec>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d210      	bcs.n	800252a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002508:	4b25      	ldr	r3, [pc, #148]	@ (80025a0 <HAL_RCC_ClockConfig+0x1ec>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f023 0207 	bic.w	r2, r3, #7
 8002510:	4923      	ldr	r1, [pc, #140]	@ (80025a0 <HAL_RCC_ClockConfig+0x1ec>)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	4313      	orrs	r3, r2
 8002516:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002518:	4b21      	ldr	r3, [pc, #132]	@ (80025a0 <HAL_RCC_ClockConfig+0x1ec>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d001      	beq.n	800252a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e036      	b.n	8002598 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	2b00      	cmp	r3, #0
 8002534:	d008      	beq.n	8002548 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002536:	4b1b      	ldr	r3, [pc, #108]	@ (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	4918      	ldr	r1, [pc, #96]	@ (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002544:	4313      	orrs	r3, r2
 8002546:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0308 	and.w	r3, r3, #8
 8002550:	2b00      	cmp	r3, #0
 8002552:	d009      	beq.n	8002568 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002554:	4b13      	ldr	r3, [pc, #76]	@ (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4910      	ldr	r1, [pc, #64]	@ (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002564:	4313      	orrs	r3, r2
 8002566:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002568:	f000 f824 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 800256c:	4602      	mov	r2, r0
 800256e:	4b0d      	ldr	r3, [pc, #52]	@ (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	091b      	lsrs	r3, r3, #4
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	490b      	ldr	r1, [pc, #44]	@ (80025a8 <HAL_RCC_ClockConfig+0x1f4>)
 800257a:	5ccb      	ldrb	r3, [r1, r3]
 800257c:	f003 031f 	and.w	r3, r3, #31
 8002580:	fa22 f303 	lsr.w	r3, r2, r3
 8002584:	4a09      	ldr	r2, [pc, #36]	@ (80025ac <HAL_RCC_ClockConfig+0x1f8>)
 8002586:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002588:	4b09      	ldr	r3, [pc, #36]	@ (80025b0 <HAL_RCC_ClockConfig+0x1fc>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f7fe f94d 	bl	800082c <HAL_InitTick>
 8002592:	4603      	mov	r3, r0
 8002594:	72fb      	strb	r3, [r7, #11]

  return status;
 8002596:	7afb      	ldrb	r3, [r7, #11]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40022000 	.word	0x40022000
 80025a4:	40021000 	.word	0x40021000
 80025a8:	080027fc 	.word	0x080027fc
 80025ac:	20000000 	.word	0x20000000
 80025b0:	20000004 	.word	0x20000004

080025b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b089      	sub	sp, #36	@ 0x24
 80025b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
 80025be:	2300      	movs	r3, #0
 80025c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025c2:	4b3e      	ldr	r3, [pc, #248]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x108>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 030c 	and.w	r3, r3, #12
 80025ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025cc:	4b3b      	ldr	r3, [pc, #236]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x108>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d005      	beq.n	80025e8 <HAL_RCC_GetSysClockFreq+0x34>
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	2b0c      	cmp	r3, #12
 80025e0:	d121      	bne.n	8002626 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d11e      	bne.n	8002626 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025e8:	4b34      	ldr	r3, [pc, #208]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x108>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d107      	bne.n	8002604 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025f4:	4b31      	ldr	r3, [pc, #196]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x108>)
 80025f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025fa:	0a1b      	lsrs	r3, r3, #8
 80025fc:	f003 030f 	and.w	r3, r3, #15
 8002600:	61fb      	str	r3, [r7, #28]
 8002602:	e005      	b.n	8002610 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002604:	4b2d      	ldr	r3, [pc, #180]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	091b      	lsrs	r3, r3, #4
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002610:	4a2b      	ldr	r2, [pc, #172]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002618:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10d      	bne.n	800263c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002624:	e00a      	b.n	800263c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	2b04      	cmp	r3, #4
 800262a:	d102      	bne.n	8002632 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800262c:	4b25      	ldr	r3, [pc, #148]	@ (80026c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800262e:	61bb      	str	r3, [r7, #24]
 8002630:	e004      	b.n	800263c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	2b08      	cmp	r3, #8
 8002636:	d101      	bne.n	800263c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002638:	4b23      	ldr	r3, [pc, #140]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800263a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	2b0c      	cmp	r3, #12
 8002640:	d134      	bne.n	80026ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002642:	4b1e      	ldr	r3, [pc, #120]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d003      	beq.n	800265a <HAL_RCC_GetSysClockFreq+0xa6>
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2b03      	cmp	r3, #3
 8002656:	d003      	beq.n	8002660 <HAL_RCC_GetSysClockFreq+0xac>
 8002658:	e005      	b.n	8002666 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800265a:	4b1a      	ldr	r3, [pc, #104]	@ (80026c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800265c:	617b      	str	r3, [r7, #20]
      break;
 800265e:	e005      	b.n	800266c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002660:	4b19      	ldr	r3, [pc, #100]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002662:	617b      	str	r3, [r7, #20]
      break;
 8002664:	e002      	b.n	800266c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	617b      	str	r3, [r7, #20]
      break;
 800266a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800266c:	4b13      	ldr	r3, [pc, #76]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x108>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	091b      	lsrs	r3, r3, #4
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	3301      	adds	r3, #1
 8002678:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800267a:	4b10      	ldr	r3, [pc, #64]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x108>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	0a1b      	lsrs	r3, r3, #8
 8002680:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	fb03 f202 	mul.w	r2, r3, r2
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002690:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002692:	4b0a      	ldr	r3, [pc, #40]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	0e5b      	lsrs	r3, r3, #25
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	3301      	adds	r3, #1
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026ac:	69bb      	ldr	r3, [r7, #24]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3724      	adds	r7, #36	@ 0x24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40021000 	.word	0x40021000
 80026c0:	0800280c 	.word	0x0800280c
 80026c4:	00f42400 	.word	0x00f42400
 80026c8:	007a1200 	.word	0x007a1200

080026cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026d4:	2300      	movs	r3, #0
 80026d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80026e4:	f7ff f9ee 	bl	8001ac4 <HAL_PWREx_GetVoltageRange>
 80026e8:	6178      	str	r0, [r7, #20]
 80026ea:	e014      	b.n	8002716 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026ec:	4b25      	ldr	r3, [pc, #148]	@ (8002784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f0:	4a24      	ldr	r2, [pc, #144]	@ (8002784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80026f8:	4b22      	ldr	r3, [pc, #136]	@ (8002784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002704:	f7ff f9de 	bl	8001ac4 <HAL_PWREx_GetVoltageRange>
 8002708:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800270a:	4b1e      	ldr	r3, [pc, #120]	@ (8002784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800270c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800270e:	4a1d      	ldr	r2, [pc, #116]	@ (8002784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002710:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002714:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800271c:	d10b      	bne.n	8002736 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b80      	cmp	r3, #128	@ 0x80
 8002722:	d919      	bls.n	8002758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2ba0      	cmp	r3, #160	@ 0xa0
 8002728:	d902      	bls.n	8002730 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800272a:	2302      	movs	r3, #2
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	e013      	b.n	8002758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002730:	2301      	movs	r3, #1
 8002732:	613b      	str	r3, [r7, #16]
 8002734:	e010      	b.n	8002758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b80      	cmp	r3, #128	@ 0x80
 800273a:	d902      	bls.n	8002742 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800273c:	2303      	movs	r3, #3
 800273e:	613b      	str	r3, [r7, #16]
 8002740:	e00a      	b.n	8002758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b80      	cmp	r3, #128	@ 0x80
 8002746:	d102      	bne.n	800274e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002748:	2302      	movs	r3, #2
 800274a:	613b      	str	r3, [r7, #16]
 800274c:	e004      	b.n	8002758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b70      	cmp	r3, #112	@ 0x70
 8002752:	d101      	bne.n	8002758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002754:	2301      	movs	r3, #1
 8002756:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002758:	4b0b      	ldr	r3, [pc, #44]	@ (8002788 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f023 0207 	bic.w	r2, r3, #7
 8002760:	4909      	ldr	r1, [pc, #36]	@ (8002788 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4313      	orrs	r3, r2
 8002766:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002768:	4b07      	ldr	r3, [pc, #28]	@ (8002788 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	429a      	cmp	r2, r3
 8002774:	d001      	beq.n	800277a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e000      	b.n	800277c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40021000 	.word	0x40021000
 8002788:	40022000 	.word	0x40022000

0800278c <memset>:
 800278c:	4402      	add	r2, r0
 800278e:	4603      	mov	r3, r0
 8002790:	4293      	cmp	r3, r2
 8002792:	d100      	bne.n	8002796 <memset+0xa>
 8002794:	4770      	bx	lr
 8002796:	f803 1b01 	strb.w	r1, [r3], #1
 800279a:	e7f9      	b.n	8002790 <memset+0x4>

0800279c <__libc_init_array>:
 800279c:	b570      	push	{r4, r5, r6, lr}
 800279e:	4d0d      	ldr	r5, [pc, #52]	@ (80027d4 <__libc_init_array+0x38>)
 80027a0:	4c0d      	ldr	r4, [pc, #52]	@ (80027d8 <__libc_init_array+0x3c>)
 80027a2:	1b64      	subs	r4, r4, r5
 80027a4:	10a4      	asrs	r4, r4, #2
 80027a6:	2600      	movs	r6, #0
 80027a8:	42a6      	cmp	r6, r4
 80027aa:	d109      	bne.n	80027c0 <__libc_init_array+0x24>
 80027ac:	4d0b      	ldr	r5, [pc, #44]	@ (80027dc <__libc_init_array+0x40>)
 80027ae:	4c0c      	ldr	r4, [pc, #48]	@ (80027e0 <__libc_init_array+0x44>)
 80027b0:	f000 f818 	bl	80027e4 <_init>
 80027b4:	1b64      	subs	r4, r4, r5
 80027b6:	10a4      	asrs	r4, r4, #2
 80027b8:	2600      	movs	r6, #0
 80027ba:	42a6      	cmp	r6, r4
 80027bc:	d105      	bne.n	80027ca <__libc_init_array+0x2e>
 80027be:	bd70      	pop	{r4, r5, r6, pc}
 80027c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80027c4:	4798      	blx	r3
 80027c6:	3601      	adds	r6, #1
 80027c8:	e7ee      	b.n	80027a8 <__libc_init_array+0xc>
 80027ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ce:	4798      	blx	r3
 80027d0:	3601      	adds	r6, #1
 80027d2:	e7f2      	b.n	80027ba <__libc_init_array+0x1e>
 80027d4:	0800283c 	.word	0x0800283c
 80027d8:	0800283c 	.word	0x0800283c
 80027dc:	0800283c 	.word	0x0800283c
 80027e0:	08002840 	.word	0x08002840

080027e4 <_init>:
 80027e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027e6:	bf00      	nop
 80027e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ea:	bc08      	pop	{r3}
 80027ec:	469e      	mov	lr, r3
 80027ee:	4770      	bx	lr

080027f0 <_fini>:
 80027f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027f2:	bf00      	nop
 80027f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027f6:	bc08      	pop	{r3}
 80027f8:	469e      	mov	lr, r3
 80027fa:	4770      	bx	lr
